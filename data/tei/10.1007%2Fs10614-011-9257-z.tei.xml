<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/lopez/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Numerical Toolbox to Solve N-Player Affine LQ Open-Loop Differential Games</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Springer Nature</publisher>
				<availability status="unknown"><p>Copyright Springer Nature</p>
				</availability>
				<date type="published" when="2011-02-12">12 February 2011</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tomasz</forename><surname>Michalak</surname></persName>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacob</forename><surname>Engwerda</surname></persName>
							<email>j.c.engwerda@uvt.nl</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><surname>Plasmans</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Institute of Informatics</orgName>
								<orgName type="institution">University of Warsaw</orgName>
								<address>
									<addrLine>ul. Banacha 2</addrLine>
									<postCode>02-097</postCode>
									<settlement>Warszawa</settlement>
									<country key="PL">Poland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">University of Tilburg</orgName>
								<address>
									<postBox>P.O. Box 90153</postBox>
									<postCode>5000 LE</postCode>
									<settlement>Tilburg</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">University of Antwerp</orgName>
								<address>
									<addrLine>Prinsstraat 13</addrLine>
									<postCode>2000</postCode>
									<settlement>Antwerpen</settlement>
									<country key="BE">Belgium</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Numerical Toolbox to Solve N-Player Affine LQ Open-Loop Differential Games</title>
					</analytic>
					<monogr>
						<title level="j" type="main">Computational Economics</title>
						<title level="j" type="abbrev">Comput Econ</title>
						<idno type="ISSN">0927-7099</idno>
						<idno type="eISSN">1572-9974</idno>
						<imprint>
							<publisher>Springer Nature</publisher>
							<biblScope unit="volume">37</biblScope>
							<biblScope unit="issue">4</biblScope>
							<biblScope unit="page" from="375" to="410"/>
							<date type="published" when="2011-02-12">12 February 2011</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1007/s10614-011-9257-z</idno>
					<idno type="ark">ark:/67375/VQC-2SRRZ5PG-3</idno>
					<idno type="istexId">44E0828A9F0D5E1920F5122E6FD3779F7475DC27</idno>
					<ptr type="open-access" target="https://link.springer.com/content/pdf/10.1007%2Fs10614-011-9257-z.pdf" />
					<note type="submission">Accepted: 14 January 2011 /</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.6.2-SNAPSHOT" ident="GROBID" when="2020-08-14T01:07+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Linear quadratic differential games</term>
					<term>Riccati equations</term>
					<term>Cooperative games</term>
					<term>Noncooperative games</term>
					<term>Coalition structures</term>
					<term>Numerical computation</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present an algorithm and a corresponding MATLAB numerical toolbox to solve any form of infinite-planning horizon affine linear quadratic open-loop differential games. By rewriting a specific application into the standard framework one can use the toolbox to calculate and verify the existence of both the open-loop noncooperative Nash equilibrium (equilibria) and cooperative Pareto equilibrium (equilibria). In case there is more than one equilibrium for the non-cooperative case, the toolbox determines all solutions that can be implemented as a feedback strategy. Alternatively, the toolbox can apply a number of choice methods in order to discriminate between multiple equilibria. The user can predefine a set of coalition structures for which they would like to calculate the non-cooperative Nash solution(s). It is also possible to specify the relative importance of each player in any coalition structure. Furthermore, the toolbox offers plotting facilities as well as other options to analyse the outcome of the game. For instance, it is possible to disaggregate each player&apos;s total loss into its contributing elements. The toolbox is available as a freeware from the authors of this paper.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Many situations in, for example, economics and management are characterised by multiple decision makers/players who can enforce decisions that have enduring consequences. This often invokes coordination problems and so a natural framework to analyze these kinds of problems involves dynamic game theoretical settings. Dynamic game theory tries to arrive at appropriate models describing a dynamic process affected by different players. Depending on the specific problem such models can sometimes be used by an individual decision maker to optimise her performance. In other cases it may serve as a starting point to introduce new communication lines which may help to improve upon the outcome of the current process. Furthermore it is possible to analyze the robustness of players' strategies w.r.t. worst-case scenarios. To this end one can introduce "nature" as an additional player which tries to work against the other decision makers in a process.</p><p>In, for example, policy coordination problems two basic questions usually arise: (i) whether policies are coordinated and, (ii) which information the participating parties have. Both these points are rather unclear and, therefore, strategies for different possible scenarios are calculated and compared with each other. Often, one of these scenarios is the so-called open-loop scenario. In this open-loop information scenario it is assumed that all players know just the initial state of the process and the model structure. More specifically, it is assumed that players simultaneously determine their actions for the whole planning horizon of the process before it starts. Next they submit their actions to some central authority who then enforces these plans as binding commitments. In other words, players cannot react on any deviations occurring during the evolution of the process. Obviously, since according to this scenario the participating parties can not react to each other's policies, its economic relevance is mostly rather limited. However, as a benchmark to see how much parties can gain by playing other strategies, its role is fundamental. Due to its analytic tractability the open-loop Nash equilibrium strategy is in particular very popular for problems where the underlying model can be described by a (set of) linear differential equation(s) and the individual objectives can be approximated by functions that quadratically penalise deviations from some (equilibrium) targets. Examples and additional references of differential games in economics and management science can be found e.g. in <ref type="bibr" target="#b3">Dockner et al. (2000)</ref>, <ref type="bibr" target="#b9">Jørgensen and Zaccour (2003)</ref> and <ref type="bibr" target="#b16">Plasmans et al. (2006)</ref>.</p><p>Under the assumption that the parties have a finite-planning horizon, the linear quadratic differential game was first modeled and solved in a mathematically rigorous way by <ref type="bibr">Starr and Ho (1969a,b)</ref>. A recent exposition (and additional references) on linear quadratic differential games can be found in , whereas <ref type="bibr" target="#b2">Başar and Olsder (1999)</ref> give a good overview and introduction on dynamic games in general.</p><p>In the rest of this paper we will concentrate on the case that the players base their decisions on a performance criterion that has an infinite-planning horizon. We will present an algorithm and a corresponding MATLAB numerical toolbox which solves any form of an infinite-planning horizon affine linear quadratic open-loop differential game. The software, called LQDG Toolbox, is available as a freeware from the authors of this paper. 1 By rewriting a specific application into the standard framework, one can use the toolbox to calculate and verify the existence of both the open-loop non-cooperative Nash equilibrium (equilibria) and cooperative Pareto equilibrium (equilibria) of any infinite-planning horizon affine linear quadratic open-loop differential game. In case there is more than one equilibrium for the non-cooperative case, the toolbox determines all solutions that can be implemented as a state-feedback strategy that is a common assumption in most of the applications. 2 Alternatively, the toolbox can apply a number of choice methods in order to discriminate between multiple equilibria. For instance, one can choose to report only Pareto-undominated solutions or only those that are characterised by the lowest combined loss of all the players. In order to determine the cooperative solution, the user is asked to specify the relative importance of each player in the cooperative game. Moreover, the user can predefine a set of coalition structures for which they would like to calculate the noncooperative Nash solution(s). Conversely, a coalition structure generator is provided that automatically creates a whole space of coalition structures for a given number of players. Furthermore, the toolbox offers plotting facilities as well as other options to analyze the outcome of the game. For instance, it is possible to disaggregate each player's total loss into its contributing elements, which correspond to the quadratic expressions constituting the player's loss function.</p><p>The paper is organised as follows. In Sect. 2 we will outline the model considered and present both necessary and sufficient conditions under which there will exist a unique equilibrium, a number of multiple equilibria or an infinite number of these. The basic algorithm underlying the numerical toolbox that is presented in Sect. 4 is discussed in Sect. 3. In Sect. 4 we will discuss the toolbox that has been constructed to verify in typical applications whether there will be a unique equilibrium, multiple equilibria or infinite number of these and how to obtain the solution in the first two cases. In Sect. 5 we illustrate the use and capabilities of this software with a number of examples. Section 6 concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">The Open-Loop Game</head><p>In this section we consider two players who control a different set of inputs v i to the single system described by the structural (simultaneous) form model:</p><formula xml:id="formula_0">y(t) = P 1ṗ (t) + P 2 p(t) + P 3 y(t) + P 41 v 1 (t) + P 42 v 2 (t) + P 5 c,<label>(1)</label></formula><formula xml:id="formula_1">p(t) = P 6ṗ (t) + P 7 p(t) + P 8 y(t) + P 91 v 1 (t) + P 92 v 2 (t) + P 10 c, p(0) = p 0 ,<label>(2)</label></formula><p>where p is the n-dimensional state of the system; v i is an m i -dimensional (control) vector that player i, i = 1, 2, can manipulate; y is a b-dimensional vector of endogenous variables; c is a constant (that can be chosen without loss of generality equal to 1) and p 0 is the initial state of the system. We assume that all variables can be observed at any point of time and that n, m i ≥ 1 and b ≥ 0. Model (1,2) is a formulation which one frequently encounters in economic modeling. Since we like to stay close to the original equations formulated by the modeler we choose for this formulation instead of the standard state-space formulation. Notice that, by choosing P 1 = P 3 = P 6 = P 8 = 0, our formulation includes the standard state-space formulation.</p><p>The performance criterion player i likes to minimise is:</p><formula xml:id="formula_2">∞ 0 e −θt ( i1 w(t) − f ) T L i1 ( i1 w(t) − f ) + 2( i2 w(t) − g) T L i2 e dt,<label>(3)</label></formula><p>where</p><formula xml:id="formula_3">w T (t) := [ṗ T (t) p T (t) y T (t) v T 1 (t) v T 2 (t)]</formula><p>; f and g are some constant vectors in IR 2n+b+m 1 +m 2 ; e := [1, . . . , 1] T ∈ IR 2n+b+m 1 +m 2 and θ is a non-negative discounting factor. In this formulation the introduction of the i j matrices makes it possible to deal with several interpretations of the model. For instance by choosing in (3) i1 = i2 and f = g the vector i j w(t) can be interpreted as an output vector of the system player i likes to track towards some specific value. By choosing a specific column of the i j, j = 1, 2, matrices equal to zero, e.g., one can express the fact that some variable is not an important variable for player i. The matrices L i1 are (without loss of generality) assumed to be symmetric. Later on additional assumptions will be made w.r.t. some of the above matrices.</p><p>It is assumed that the players act non-cooperatively and that their information structure about the game is of the open-loop type. More specifically, we suppose that the players choose their actions from the following set of actions:</p><formula xml:id="formula_4">U s = v ∈ L 2 | J i (x 0 , v) exists in IR ∪ {−∞, ∞}, lim t→∞ x(t) = 0 .</formula><p>The assumption that both players simultaneously use stabilizing controls introduces the cooperative meta-objective to stabilise the system (see e.g. , for a discussion).</p><p>We are looking for the Nash equilibria of this game. That is, for the combinations of actions of all players which are secure against any attempt by one player to unilaterally alter her strategy, or, stated differently, for such sets of actions that if one player deviates she will only lose. In the literature on dynamic games this problem is known as the open-loop Nash non-zero-sum linear quadratic differential game and has been analyzed by several authors (see e.g. <ref type="bibr" target="#b19">Starr and Ho 1969a;</ref><ref type="bibr" target="#b18">Simaan and Cruz 1973;</ref><ref type="bibr" target="#b2">Başar and Olsder 1999;</ref><ref type="bibr" target="#b0">Abou-Kandil and Bertrand 1986;</ref><ref type="bibr" target="#b8">Feucht 1994;</ref><ref type="bibr" target="#b10">Kremer 2002;</ref>. To avoid cumbersome notation, we restrict the analyses in this section to the two-player case. The algorithm is, however, implemented for the general N -player case.</p><p>To analyze the question under which conditions this game will have a unique equilibrium we first rewrite the model into the standard framework considered in <ref type="bibr" target="#b6">Engwerda (2008)</ref>. <ref type="bibr">3</ref> Assuming that I − P 6 is invertible, we have from (2) thaṫ</p><formula xml:id="formula_5">p(t) = (I − P 6 ) −1 (P 7 p(t) + P 8 y(t) + P 91 v 1 (t) + P 92 v 2 (t) + P 10 c) .<label>(4)</label></formula><p>Substitution of this into (1) and, under the assumption thatP 1 := I − P 1 (I − P 6 ) −1 P 8 − P 3 is invertible we can perform a number of elementary operations in order to arrive at the following reduced form of the model:</p><formula xml:id="formula_6">p(t) =Â p(t) +B 1 v 1 (t) +B 2 v 2 (t) +Ê 1 c, p(0) = p 0 , (5) y(t) =Ĉ p(t) +D 1 v 1 (t) +D 2 v 2 (t) +Ê 2 c,<label>(6)</label></formula><p>withĈ</p><formula xml:id="formula_7">:=P −1 1 (P 1 (I − P 6 ) −1 P 7 + P 2 ),<label>(7)</label></formula><formula xml:id="formula_8">D 1 :=P −1 1 (P 1 (I − P 6 ) −1 P 91 + P 41 ),<label>(8)</label></formula><formula xml:id="formula_9">D 2 :=P −1 1 (P 1 (I − P 6 ) −1 P 92 + P 42 ),<label>(9)</label></formula><formula xml:id="formula_10">E 2 :=P −1 1 (P 1 (I − P 6 ) −1 P 10 + P 5 ),<label>(10)</label></formula><p>A :</p><formula xml:id="formula_11">= (I − P 6 ) −1 (P 8Ĉ + P 7 ),<label>(11)</label></formula><formula xml:id="formula_12">B 1 := (I − P 6 ) −1 (P 8D1 + P 91 ),<label>(12)</label></formula><formula xml:id="formula_13">B 2 := (I − P 6 ) −1 (P 8D2 + P 92 ),<label>(13)</label></formula><p>E 1 := (I − P 6 ) −1 (P 8Ê2 + P 10 ).</p><p>Next, introduce</p><formula xml:id="formula_15">z T := p T c v T 1 v T 2 .</formula><p>Substitutingṗ and y from (5) and (6), respectively, into w yields:</p><formula xml:id="formula_16">w = ⎡ ⎢ ⎢ ⎢ ⎢ ⎣ÂÊ 1B1B2 I 0 0 0 CÊ 2D1D2 0 0 I 0 0 0 0 I ⎤ ⎥ ⎥ ⎥ ⎥ ⎦ z =: N z.<label>(15)</label></formula><p>Using this, J i can be rewritten as:</p><formula xml:id="formula_17">J i = ∞ 0 e −θt z T (t)( i1 N − [0 f 0 0]) T L i1 ( i1 N − [0 f 0 0])z(t) +2z T (t)( i2 N − [0 g 0 0]) T L i2 [0 e 0 0]z(t) dt = ∞ 0 e −θt z T (t) ( i1 N − [0 f 0 0]) T L i1 ( i1 N − [0 f 0 0]) + ( i2 N − [0 g 0 0]) T L i2 [0 e 0 0] + [0 e 0 0] T L T i2 ( i2 N − [0 g 0 0]) z(t)dt =: ∞ 0 e −θt z T (t)M i z(t)dt.<label>(16)</label></formula><p>Finally, we introduce the extended state variable x T (t) := e − 1 2 θt [ p T (t) c] and control variable u i (t) := e − 1 2 θt v i (t) so that the state of the system isn = n + 1-dimensional. Now, the game can be rewritten into the standard form. Players minimise:</p><formula xml:id="formula_18">J i (u 1 , u 2 ) := ∞ 0 [x T (t), u T 1 (t), u T 2 (t)]M i ⎡ ⎣ x(t) u 1 (t) u 2 (t) ⎤ ⎦ dt,<label>(17)</label></formula><p>where x(t) is the solution to the linear differential equation:</p><formula xml:id="formula_19">x(t) = Ax(t) + B 1 u 1 (t) + B 2 u 2 (t), x T (0) = p T 0 c ,<label>(18)</label></formula><p>with:</p><formula xml:id="formula_20">A := Â − 1 2 θ IÊ 1 0 − 1 2 θ ; and B i := B i 0 .<label>(19)</label></formula><p>Now, factorise M i as follows:</p><formula xml:id="formula_21">M i =: ⎡ ⎣ Q i V i W i V T i R 1i N i W T i N T i R 2i ⎤ ⎦ , with Q i ∈ IRn ×n , R 1i ∈ IR m i ×m i , V i ∈ IRn ×m 1 , W i ∈ IRn ×m 2 and N i ∈ IR m 1 ×m 2 .</formula><p>In the rest of the paper we will assume that the matrices R ii are positive definite and matrix G (see Appendix A for some additional notation including matrix G) is invertible. In the solution of this game the next algebraic Riccati equations play an important role:</p><formula xml:id="formula_22">A T K 1 + K 1 A − (K 1 B 1 + V 1 )R −1 11 B T 1 K 1 + V T 1 + Q 1 = 0, (20) A T K 2 + K 2 A − (K 2 B 2 + W 2 )R −1 22 B T 2 K 2 + W T 2 + Q 2 = 0,</formula><p>as well as the set of (coupled) algebraic Riccati equations:</p><formula xml:id="formula_23">0 = A T 2P +P A −P BG −1 B TP + Q,<label>(21)</label></formula><p>or, equivalently:</p><formula xml:id="formula_24">0 = A T 2P +P A − P B + Z 1 Z 2 G −1 ( B TP + Z ) + Q.</formula><p>In particular, the existence of a so-called strongly stabilizing solution of (21) plays an important role. A solutionP T =: (P T 1 ,P T 2 ), withP i ∈ IRn, of (21) is called a strongly stabilizing solution if both σ Ã − BG −1B TP and σ Ã T</p><formula xml:id="formula_25">2 −P BG −1B T ⊂ C − . 4</formula><p>The next relationship between certain invariant subspaces of matrix:</p><formula xml:id="formula_26">M := Ã −BG −1B T −Q −Ã T 2<label>(22)</label></formula><p>and the solutions of the Riccati equations (21) are well-known (see e.g. <ref type="bibr" target="#b5">Engwerda 2007)</ref>. This property will also be used to calculate the strongly stabilizing solutions of (21).</p><p>Lemma 1 Let V ⊂ IR 3n be ann-dimensional invariant subspace of M, and let X i ∈ IRn ×n , i = 0, 1, 2, be three real matrices such that:</p><formula xml:id="formula_27">V = im X T 0 , X T 1 , X T 2 T . (23) If X 0 is invertible, thenP i := X i X −1 0 , i = 1, 2, solves (21) and σ (A − BG −1 (Z + B TP )) = σ (M| V ). Furthermore, (P 1 ,P 2 )</formula><p>is independent of the specific choice of a basis of V .</p><p>When X 0 is invertible, then-dimensional invariant subspace V in (23) is called a graph subspace. The next lemma provides a characterisation of the strongly stabilizing solution of (21): Moreover, in case this game has a unique equilibrium, the equilibrium actions are given by:</p><formula xml:id="formula_28">Lemma 2 1.</formula><formula xml:id="formula_29">u * 1 (t) u * 2 (t) = −G −1 Z +B TP ˜ (t, 0)x 0 ,<label>(24)</label></formula><p>where˜ (t, 0) is the solution of the transition equation:</p><formula xml:id="formula_30">(t, 0) = A − BG −1 Z +B TP ˜ (t, 0);˜ (0, 0) = I.</formula><p>The costs by using the actions (24) for the players are:</p><formula xml:id="formula_31">x T 0L i x 0 , i = 1, 2,<label>(25)</label></formula><p>where, with A cl := A− BG −1 Z +B TP ,L i is the unique solution of the Lyapunov equation:</p><formula xml:id="formula_32">I, −G −1 Z +B TP M i I, −G −1 Z +B TP T + A T clL i +L i A cl = 0.</formula><p>In case the game has more than one equilibrium, generically, there exists an infinite number of equilibria (see <ref type="bibr" target="#b10">Kremer 2002</ref>). However, usually for a finite number of them only, the corresponding actions can be implemented as a state-feedback strategy (i.e., such strategy that can be written as a linear function of the state variables of the model like, for instance, in Theorem 3; see also footnote 1 in this paper). In economics it is often argued that actions by policymakers have a (state-)feedback structure (Taylor rule etc.). For that reason, in case there is more than one equilibrium, the algorithm will determine only those that can be implemented as a (state-)feedback rule. From  we recall the following result. Finally, if one would like to consider the game (17-18) without a constant that, in particular, allows for a zero discount rate, the state variable should not be extended, i.e., x T (t) := e − 1 2 θt p T (t) is to be used instead of x T (t) := e − 1 2 θt p T (t) c . The system in (18) becomes:</p><formula xml:id="formula_33">x(t) = Ax(t) + B 1 u 1 (t) + B 2 u 2 (t), x T (0) = p T 0 ,<label>(26)</label></formula><p>where:</p><formula xml:id="formula_34">A :=Â − 1 2 θ I ;<label>(27)</label></formula><formula xml:id="formula_35">B i :=B i .<label>(28)</label></formula><p>The rest of the above analysis remains valid but withn = n.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The Computational Framework</head><p>To verify the existence, the number and numerical values of equilibria in the game (17-18), in the numerical toolbox we use the following algorithm 5 :</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 5</head><p>Step A1: Verify whether R ii &gt; 0, G is invertible and (A, B i ) are stabilizable. If this is not the case, go to Step A6.</p><p>Step A2: Calculate the eigenstructure of:</p><formula xml:id="formula_36">H 1 := A − B 1 R −1 11 V 1 −S 1 −Q 1 − A − B 1 R −1 11 V 1 T and H 2 := A − B 2 R −1 22 W 2 −S 2 −Q 2 − A − B 2 R −1 22 W 2 T .</formula><p>If H i , i = 1, 2, has ann-dimensional stable graph subspace, then proceed. Otherwise there is not an equilibrium and go to Step A6. 6</p><p>Step A3:</p><formula xml:id="formula_37">Calculate matrix M := Ã −BG −1B T −Q −Ã T 2 .</formula><p>If M has s ≥n stable eigenvalues and u ≤ 2n unstable eigenvalues (counting algebraic multiplicities) then proceed to Step A4. Otherwise, i.e., if s &lt;n, the game has no equilibrium and go to Step A6.</p><p>Step A4: The number of equilibria equals the number of differentn-dimensional stable invariant graph subspaces of matrix M. In particular this implies that if matrix M has eigenvalues that have a geometric multiplicity that is larger than one, it may happen that there are an infinite number of equilibria (see e.g. <ref type="bibr">Engwerda 2005, Example 7.11)</ref>. The algorithm does not elaborate this case because (i) it is numerically more involved to decide whether an eigenvalue has a geometric multiplicity that is larger than one; (ii) the occurrence of such cases requires a more detailed inspection of how many different n-dimensional subspaces can be generated; and (iii) generically, the algebraic multiplicity of the eigenvalues is one. If s ≥n and there is at least one eigenvalue that has an algebraic multiplicity larger than one, then the algorithm terminates and the user is informed about the possibility that in the simulation an infinite number of equilibria might occur. It is then up to the user either to choose some parameters that differ a little bit from the previous choice (yielding probably a simulation that produces no difficulties), or to take a serious look at the eigenstructure of matrix M and draw own conclusions. Therefore the algorithm proceeds as follows: A4.1: If at least one eigenvalue has an algebraic multiplicity larger than one then the game may have an infinite number of equilibria if s &gt;n.</p><p>If s =n there probably exists a unique equilibrium, but this has to be verified using the generalised eigenspace(s). </p><formula xml:id="formula_38">i ∈ Cn λ s : (i) let V s</formula><p>i be the matrix constructed in a similar way as in item A4.2.1.2; (ii) go to Step A5.</p><p>Step A5: For every matrix of eigenvectorsṼ s i calculate the corresponding M-invariant graph subspace P. To that end proceed as follows:</p><formula xml:id="formula_39">A5.1: Let X 1 , X 2 and X 3 be such that ⎡ ⎣ X 1 X 2 X 3 ⎤ ⎦ =Ṽ s i .</formula><p>Verify whether matrix X 1 is invertible. If not then ImṼ s i is not a graph subspace and there is no equilibrium corresponding with this set of eigenvalues. Choose another matrixṼ s i from the set of potential candidates and return to the beginning of the current step (Step A5.1). If there are no other candidates left, go to Step 6.</p><formula xml:id="formula_40">* DenoteP 1 := X 2 X −1 1 andP 2 := X 3 X −1 1 . * Then: u * 1 (t) u * 2 (t) := −G −1 (Z + B TP )x * (t),</formula><p>where</p><formula xml:id="formula_41">withP T := P T 1P T</formula><p>2 is the open-loop Nash equilibrium strategy. Here x * (t) is the solution of the differential equatioṅ</p><formula xml:id="formula_42">x(t) = (A − BG −1 (Z + B TP ))x(t), x(0) = x 0 .</formula><p>* The spectrum of the corresponding closed-loop matrix A cl equals λ s i . * Players' losses can be computed from J i = p T 0L i p 0 whereL i solves the following Lyapunov equation:</p><formula xml:id="formula_43">A T C LL i +L i A C L + 1 2 I, F T M i I F = 0.<label>(29)</label></formula><p>Step A6: End of algorithm.</p><p>Step A2 in the above algorithm verifies whether the algebraic Riccati equations (20) have a stabilizing solution. Of course one can use here MATLAB to verify this. Concerning the numerical stability of Algorithm 5 we notice that various suggestions have been made in the literature to calculate solutions of Riccati equations in a numerically reliable way (see e.g. <ref type="bibr" target="#b11">Laub (1979</ref><ref type="bibr" target="#b12">Laub ( , 1991</ref>, <ref type="bibr" target="#b15">Paige and van Loan (1981)</ref>, van <ref type="bibr" target="#b22">Dooren (1981)</ref>, <ref type="bibr" target="#b13">Mehrmann (1991)</ref> and <ref type="bibr" target="#b0">Abou-Kandil and Bertrand (1986)</ref> for a more general survey on various types of Riccati equations). These methods can also be used to improve the numerical stability of Algorithm 5. In particular, if one considers the implementation of large scale models one should consult this literature.</p><p>As already indicated one can also try to solve the (set of coupled) algebraic Riccati equations (20) iteratively. In particular, for large scale systems one might hope that such algorithms will be more efficient. For that reason various iteration schemes have been suggested in literature (see e.g. Abou- <ref type="bibr" target="#b0">Kandil and</ref><ref type="bibr">Bertrand 1986 or Engwerda 2007)</ref>. However, since Eq. 20 may admit several solutions, convergence of any game is quite difficult to obtain under general conditions (see Azevedo-Perdicoúlis and Jank <ref type="formula">2005</ref>, for a result on positive solutions). An important problem with these algorithms is related to the a priori verification of the system's strong stabilizability. If one does not want to do it there is an open question how to proceed in case the algorithm terminates at a non-stabilizing solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">LQDG Toolbox</head><p>Next we proceed with an outline of the numerical toolbox. The software verifies the existence of and, provided that a finite number of equilibria exists, calculates the outcome of the N -player extension of the game (1-3). The scheme presenting all the components of the toolbox software is displayed in <ref type="figure" target="#fig_0">Fig. 1</ref>. The main file, called LQDGsolver.exe, solves the LQDG which is to be defined in the input. The input file can be created by the user using an intuitive input interface provided (file TBXinput-GUI.exe). Alternatively, more proficient users might choose to create the input file directly (in MATLAB or text formats). LQDGsolver produces the following output for every coalition structure considered: The above output is saved in MATLAB and text formats in a directory that corresponds to the chosen name of the project. The following output files are created:</p><formula xml:id="formula_44">•</formula><p>• PROJECT_NAME_model.txt: text file containing the structural and reduced form of the dynamic system; • inputPROJECT_NAME.m: binary MATLAB file containing (processed) input to the project; • PROJECT_NAME_validation.txt: text file containing all the information about the various stages of model validation; • PROJECT_NAME_output.txt: text file containing all the output produced; and • outputPROJECT_NAME.m: binary MATLAB file containing all the project's output.</p><p>The plotting tool is provided that uses the above output to draw the dynamics of every variable in the model for a chosen coalition structure and equilibrium. Less advanced users can use a simple output interface (file TBXoutputGUI.exe) that allows both to edit the toolbox output and to plot the graphs required. Conversely, more advanced users can directly analyse output of all numerical simulations and create graphs.</p><p>The input for the toolbox is the following model:</p><formula xml:id="formula_45">y(t) = P 1ṗ (t) + P 2 p(t) + P 3 y(t) + N i=1 P 4i v i (t) + P 5 ,<label>(30)</label></formula><formula xml:id="formula_46">p(t) = P 6ṗ (t) + P 7 p(t) + P 8 y(t) + N i=1 P 9i v i (t) + P 10 , p(0) = p 0 ,<label>(31)</label></formula><p>where p is the n-dimensional state of the system, v i is the m i -dimensional (control) vector player i (where i = 1, . . . , |N |) can manipulate (with m i =: m), y is the b-dimensional vector of endogenous variables and p 0 is the initial state of the system. Defining z(t) : <ref type="bibr">T</ref> , the general form of the performance criterion that player i likes to minimise is:</p><formula xml:id="formula_47">= [ p(t)ṗ(t) y(t) v(t) c]</formula><formula xml:id="formula_48">J i = 1 2 ∞ 0 z T (t) i z(t) e −θ(t−t 0 ) dt,<label>(32)</label></formula><p>where:</p><formula xml:id="formula_49">i := ⎡ ⎢ ⎢ ⎣ φ (1,1),i φ (1,2),i . . . φ (1,2n+b+m+1),i φ (2,1),i φ (2,2),i . . . φ (2,2n+b+m+1),i . . . . . . . . . . . . φ (2n+b+m+1,1,i) φ (2n+b+m+1,2),i . . . φ (2n+b+m+1,2n+b+m+1),i ⎤ ⎥ ⎥ ⎦ .</formula><p>Matrix i can be factorised as follows:</p><formula xml:id="formula_50">i := ⎡ ⎢ ⎢ ⎢ ⎢ ⎣ p 2 ,i pṗ,i py,i pv,i pc,i ṗ p,i ṗ 2 ,i ṗy,i ṗv,i ṗc,i yp,i yṗ,i y 2 ,i yv,i yc,i vp,i vṗ,i vy,i v 2 ,i vc,i cp,i cṗ,i cy,i cv,i c 2 ,i ⎤ ⎥ ⎥ ⎥ ⎥ ⎦ .</formula><p>with all submatrices .,i defined in Appendix B. Furthermore, in Appendix C it is shown how, using the appropriate notation, it is possible to define any linear quadratic loss function containing the variables from vector z(t) in the input file (if the user chooses to create this file by himself not using the provided interface). Of course, the user is supposed to define only those coefficients φ (i.e., elements of matrix˜ i ) that are different from zero. The cost criterion (32) can be rewritten as follows:</p><formula xml:id="formula_51">J i := 1 2 ∞ 0 ⎧ ⎨ ⎩ p(t) c v(t) T i ⎡ ⎣ p(t) c v(t) ⎤ ⎦ ⎫ ⎬ ⎭ e −θ(t−t 0 ) dt := 1 2 ∞ 0 ⎧ ⎨ ⎩ p(t) c v(t) M i ⎡ ⎣ p(t) c v(t) ⎤ ⎦ ⎫ ⎬ ⎭ e −θ(t−t 0 ) dt, where := ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣ I n×n 0 n×1 0 n×m n×(n+m+1) Â 1Ê1B ĈÊ 2D 0 m×n 0 m×1 I m×m m×(n+m+1) 0 1×n 1 0 1×m 1×(n+m+1) ⎤ ⎥ ⎥ ⎥ ⎥ ⎥ ⎦<label>(33)</label></formula><p>and</p><formula xml:id="formula_52">M i := T i .</formula><p>The toolbox also offers the possibility to analyze equilibria for different coalition structures which are formally defined as divisions of all the players in the game into exhaustive and disjoint coalitions. That is, if, for instance, five players participate in the game and players 1, 3, 4 and players 2, 5 decide to cooperate, then the toolbox offers the possibility to calculate the open-loop Nash equilibrium for the resulting two-player game. Obviously the outcome depends on the relative weight of every players' performance criterion within the coalition. Therefore, the user is asked to specify both the coalition structure and these relative weights.</p><p>The number of coalitions structures that can be created from even a small number of players is a non-trivial issue. More in detail, let denote the set of all possible coalition structures. The number of all possible coalition structures is a function of the number of players N and equals the so-called Bell number B |N | . The Bell number is the number of ways a set of |N | elements can be partitioned into non-empty subsets.</p><p>The following Dobinsky's formula is one way to compute Bell numbers <ref type="bibr">(Comtet 1974)</ref>:</p><formula xml:id="formula_53">B |N | = 1 e ∞ j=0 j |N | j! . 7</formula><p>To simplify the presentation of coalition structures we will use the following shorthand notation:</p><formula xml:id="formula_54">[C 1 |C 2 | . . . |C m ]</formula><p>where C 1≤k≤m is represented by the sequence of players that belong to this coalition. For example: [123|4|56] stands for a coalition structure where players 1, 2, 3 and players 5, 6 cooperate, respectively and player 4 remains single. </p><formula xml:id="formula_55">B 1 =1, B 2 = 2, B 3 = 5, B 4 = 15, B 5 = 52; B 6 =203, B 7 =877, B 8 =4140;B 9 =21147,B 10 =115975,B 11 =678570, B 12 =4213597, B 13 =27644437; B 14 = 190899322, and B 15 = 1382958545.</formula><p>It is clear that an examination of all possible coalition structures is not always interesting for the user. Usually, the researcher should choose and restrict her attention to a subset of coalition structures. In the sequel we will use the notation F for the full set of feasible coalition structures and R for a reduced set of relevant feasible coalition structures.</p><p>We will now briefly discuss the various steps the user is confronted with while using the toolbox.</p><p>Step T1: LQDG Toolbox Initialisation To define the LQDG problem the user is supposed to provide a number of compulsory components of the model. As it has been mentioned before, it is the most convenient to use the interface provided in order to create the project. The main window of the user interface is shown in <ref type="figure" target="#fig_1">Fig. 2</ref>. More proficient users also may create the input file directly in MATLAB or text formats. Compulsory components of the LQDG problem include:</p><p>• the name of the new project;</p><p>• number of players, number of state and output variables, whether the model include constant or not; • the number of control instruments per player;</p><p>• the nonzero P i and P i j matrices from the structural form model (30-31);</p><p>• the parameters from the performance criterion (32);</p><p>• the initial condition p 0 ; and • the coalition structures to be considered. <ref type="bibr">8</ref> • If the model includes constants, i.e., at least one element of matrices P 5 and P 10 is non-zero, then it is mandatory to specify a strictly positive discount rate. Step T2: Model Validation by LQDG Toolbox Based on the input that is provided in Step A1, the toolbox verifies various regularity conditions:</p><p>1. The invertibility of the matrices I − P 3 and I − P 7 (I − P 3 ) −1 P 1 − P 5 ; 2. Positive definiteness of the matrices R ii ; 3. Invertibility of G; and stabilizability of (A, B i ); and 4. The final validation step that is performed checks whether the algebraic Riccati equations (20) have a stabilizing solution.</p><p>If conditions 1 or 2 fail the toolbox terminates. If conditions 3 and 4 fail then it means that no equilibrium can be found for the particular coalition structure and the toolbox considers the next coalition structure in the queue.</p><p>Step T3: Calculation of Equilibria In this phase, open-loop Nash equilibria as outlined in Theorem 3 are calculated for every specified coalition structure (if such equilibria exists).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Examples</head><p>In this section we illustrate the various steps of the algorithm in three simple examples. Firstly, we analyze a dynamic duopoly game with sticky prices as considered by <ref type="bibr" target="#b7">Fershtman and Kamien (1987)</ref>; secondly, we present the solution of the problem used in Example 7.10 by , where a multiple finite number of equilibria emerges; thirdly, we present the solution of the problem used in Example 7.12 by  characterised by complex eigenvalues. <ref type="bibr" target="#b7">Fershtman and Kamien (1987)</ref> The problem we address here is to find the open-loop Nash equilibria of the game defined by the revenue functions:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">A Game on Dynamic Duopolistic Competition from</head><formula xml:id="formula_56">J i (v 1 , v 2 ) = ∞ 0 e −θt p(t)v i (t) − c v v i (t) − 1 2 v 2 i (t) dt,<label>(34)</label></formula><p>subject to the dynamic constraint:</p><formula xml:id="formula_57">p(t) = s{a − (v 1 (t) + v 2 (t)) − p(t)}, p(0) = p 0 .<label>(35)</label></formula><p>Recall that, in this model, θ &gt; 0 denotes the discount rate of future profits and s ∈ (0, ∞) is the adjustment speed parameter of the market price, p(t), towards the price dictated by the demand function. That is, for larger values of s the market price adjusts more quickly along the demand function. The cost functions of the companies are assumed to be C( <ref type="figure">)</ref> is a fixed parameter. Furthermore, the inverse demand function is assumed to be given byp = a −(v 1 +v 2 ).</p><formula xml:id="formula_58">v i ) := c v v i + 1 2 v 2 i , where c v ∈ (0, a</formula><p>To determine the open-loop equilibrium actions for this game (34-35) we proceed along the steps outlined in Sect. 3. To that end we first notice that the maximisation of (34) can be rewritten as the minimisation of −J i .</p><p>Step T1: LQDG Toolbox Initialisation The above maximisation problems can be rewritten in terms of (32) as:</p><formula xml:id="formula_59">− min v 1 J 1 (v 1 , v 2 ) = 1 2 T 0 e −θt ⎧ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎨ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎩ z T (t) ⎡ ⎢ ⎢ ⎢ ⎢ ⎣ 0 0 −2 0 0 0 0 0 0 0 0 0 1 0 2c v 0 0 0 0 0 0 0 0 0 0 ⎤ ⎥ ⎥ ⎥ ⎥ ⎦ 1 z(t) ⎫ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎬ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎭ dt and − min v 2 J 2 (v 1 , v 2 ) = 1 2 T 0 e −θt ⎧ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎨ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎩ z T (t) ⎡ ⎢ ⎢ ⎢ ⎢ ⎣ 0 0 0 −2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2c v 0 0 0 0 0 ⎤ ⎥ ⎥ ⎥ ⎥ ⎦ 2 z(t) ⎫ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎬ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎭ dt,</formula><p>subject to the dynamics (35), where z T (t) :</p><formula xml:id="formula_60">= [ p(t)ṗ(t) v 1 (t) v 2 (t)c].</formula><p>The model fits into our standard model (30-31) if we specify the various parameters in the input file of the toolbox as follows: P 1 = P 2 = P 3 = P 4i = P 5 = P 6 = P 8 = 0, P 7 = −s, P 9i = −s and P 10 = c.</p><p>Notice that in this example n = m 1 = m 2 = 1 (and therefore m = 2) and b = 0. In the performance specification all parameters are zero for both players except the next ones. <ref type="figure" target="#fig_0">For player 1 we have φ (1,3),1 = −2, φ (3,3)</ref>,1 = 1, and φ <ref type="bibr">(3,</ref><ref type="bibr">5)</ref>,1 = 2c v , whereas for player 2 φ (1,4),2 = −2, φ (4,4),2 = 1 and φ (4,5),2 = 2c v .</p><p>There are two players in the game. Hence B 2 = 2 and F = {[1|2], [12]}. As already mentioned before, the user can either choose to compute the Nash equilibria for all coalition structures (if such equilibria exist) or only for some elements of F by creating own set of feasible coalition structures R . We choose in this example to calculate analytically the equilibrium for non-cooperative CS [1|2].</p><p>Step T2: Model Validation by LQDG Toolbox With this input the toolbox next calculates the standard form (17-18) by considering the new variables:</p><p>x 1 (t) := e − 1 2 θt p(t), x 2 (t) := e − 1 2 θt and u i (t) := e − 1 2 θt v i (t), i = 1, 2. <ref type="formula">36</ref>With these variables the problem (34-35) can be rewritten as finding the open-loop Nash equilibrium of</p><formula xml:id="formula_61">− min u i (.) 1 2 ∞ 0 [x 1 (t) x 2 (t) u 1 (t) u 2 (t)]M i ⎡ ⎢ ⎢ ⎣ x 1 (t) x 2 (t) u 1 (t) u 2 (t) ⎤ ⎥ ⎥ ⎦ dt,<label>(37)</label></formula><p>subject to the dynamicṡ</p><formula xml:id="formula_62">x(t) = −s − 1 2 θ as 0 − 1 2 θ x(t) + −s 0 u 1 (t) + −s 0 u 2 (t).<label>(38)</label></formula><p>where M i = T i as in (33) with i defined by the user in Step T1. 9 Following the notation in Sect. 2 the toolbox generates the following matrices:</p><formula xml:id="formula_63">A = −s − 1 2 θ as 0 − 1 2 θ , B i = −s 0 , Q i = 0 0 0 0 , R ii = 1, R i j = 0 (i = j), V 1 = W 2 = −1 c v , W 1 = V 2 = 0 0</formula><p>, and N i = 0.</p><p>So, clearly R ii &gt; 0 and (A, B i ) is stabilizable. Furthermore:</p><formula xml:id="formula_64">G := 1 0 0 1 , B := −s −s 0 0 , Z 1 := −1 0 c v 0 , Z 2 := 0 −1 0 c v , Z := −1 c v −1 c v ,B T 1 := −s 0 0 0 ,B T 2 := 0 0 −s 0 ,B T := −s 0 0 0 0 0 −s 0 .</formula><p>and from this:</p><formula xml:id="formula_65">M = ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣ −3s − 1 2 θ s(a + 2c v ) −s 2 0 −s 2 0 0 − 1 2 θ 0 0 0 0 1 −c v 2s + 1 2 θ 0 0 0 −c v c 2 v −s(a + c v ) 1 2 θ 0 0 1 −c v 0 0 2 s + 1 2 θ 0 −c v c 2 v 0 0 −s(a + c v ) 1 2 θ ⎤ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎦ =: Ã −S −Q −Ã T 2 .</formula><p>Following Sect. 2 the game has, for all p 0 , a unique open-loop Nash equilibrium if the following sets of algebraic Riccati equations have a (strongly) stabilizing solution P i and K i , (where i = 1, 2, respectively):</p><p>1. The set of coupled Riccati differential equations:</p><formula xml:id="formula_66">0 = −Ã T 2 P − PÃ + P BG −1B T P −Q.<label>(39)</label></formula><p>2. The two Riccati equations:</p><formula xml:id="formula_67">0 = −A T K 1 − K 1 A + (K 1 B 1 + V 1 )R 11 B T 1 K 1 + V T 1 − Q 1 ,<label>(40)</label></formula><formula xml:id="formula_68">0 = −A T K 2 − K 2 A + (K 2 B 2 + W 2 )R 22 B T 2 K 2 + W T 2 − Q 2 . (41)</formula><p>To verify whether, e.g., the algebraic Riccati equation <ref type="formula" target="#formula_67">40</ref>has a stabilizing solution it is sufficient to check whether the following equation satisfies this property:</p><formula xml:id="formula_69">A − B 1 R −1 11 V T 1 T K + K A − B 1 R −1 11 V T 1 − K S 1 K + Q 1 − V 1 R −1 11 V T 1 = 0.<label>(42)</label></formula><p>It is easily verified that the Hamiltonian matrix associated with this Riccati equation:</p><formula xml:id="formula_70">A − B 1 R −1 11 V T 1 −S 1 −Q 1 + V 1 R −1 11 V T 1 − A − B 1 R −1 11 V T 1 T = ⎡ ⎢ ⎢ ⎣ −2s − 1 2 θ s(a + c v ) −s 2 0 0 − 1 2 θ 0 0 1 −c v 2s + 1 2 θ 0 −c v c 2 v −s(a + c v ) 1 2 θ ⎤ ⎥ ⎥ ⎦</formula><p>has a two-dimensional stable graph subspace. Thus, Eq. 40 has a stabilizing solution.</p><p>In a similar way one can verify whether (41) has a strongly stabilizing solution. The procedure to verify whether (39) has a strongly stabilizing solution is presented in the next step.</p><p>Step T3: Calculation of Equilibria Again, following Algorithm 5, the toolbox first computes the eigenvalues of matrix M to determine whether (42) has a strongly stabilizing solution. These eigenvalues are − 1 2 θ, − 1 2 s − 1 2 λ 1 , 1 2 θ, 1 2 θ, 1 2 θ + 2s, − 1 2 s + 1 2 λ 1 , where:</p><formula xml:id="formula_71">λ 1 = 17s 2 + 10sθ + θ 2 .</formula><p>Clearly, matrix M has 2 stable and 4 unstable eigenvalues. Therefore, the only open-loop Nash equilibrium candidate is obtained by considering the eigenspaces of M corresponding with the eigenvalues − 1 2 θ and − 1 2 s − 1 2 λ 1 . The eigenspaces corresponding with these eigenvalues are:</p><formula xml:id="formula_72">T 1 = Span{T 1 } where T 1 = [−(2c v θ + 2c v s + θa + 2sa), −(3θ + 4s), a − c v , (a − c v )(as − c v s − c v θ)/θ, a − c v , (a − c v )(as − c v s − c v θ)/θ] T ,</formula><p>and</p><formula xml:id="formula_73">T 2 = Span{T 2 } where T 2 = [−5s − θ − λ 1 , 0, 2, v, 2, v] T , respectively, with v := − (s+θ−λ 1 )(2sa−3sc v −c v θ−c v λ 1 ) 4s(2s+θ)</formula><p>. In particular we see that for the values − 1 2 θ, − 1 2 s − 1 2 λ 1 the corresponding eigenspace is a graph subspace (i.e., V s i = Span{T 1 , T 2 }). Since (A, B i ), where i = 1, 2, are stabilizable, R ii &gt; 0, G is invertible, M has a 2-dimensional stable graph subspace and 4 unstable eigenvalues, and the algebraic Riccati equations (39-40) have a stabilizing solution, then all conditions are satisfied for the game to have a unique open-loop Nash equilibrium. The corresponding actions are:</p><formula xml:id="formula_74">u * 1 (t) u * 2 (t) = − −1 c v −1 c v + −s 0 −s 0 P x(t),<label>(43)</label></formula><formula xml:id="formula_75">whereP 1 =P 2 = a − c v 2 (a−c v )(as−c v s−c v θ) θ v −(2c v θ + 2c v s + θa + 2sa) −5s − θ − λ 1 −(3θ + 4s) 0 −1 =: f o g o h o l o , i = 1, 2.</formula><p>Using the equilibrium actions:</p><formula xml:id="formula_76">u * i (t) = (1 + s f 0 )x 1 (t) + (sg 0 − c v )x 2 (t),</formula><p>the resulting closed-loop system is:</p><formula xml:id="formula_77">x(t) = − 1 2 s − 1 2 λ 1 1 2 (s − θ + λ 1 ) as+(a+2c v )(θ+s) 3θ+4s 0 − 1 2 θ x(t).</formula><p>Next, we reformulate this result in terms of our original model parameters. From the above differential equation in x, one obtains the next differential equation for the equilibrium price path p(t):</p><formula xml:id="formula_78">p(t) = 1 2 (θ − s − λ 1 ) p(t) − as + (a + 2c v )(θ + s) 3θ + 4s .</formula><p>The equilibrium actions are: 10 These matrices can be used to calculate players' losses for any given initial condition p 0 . 4. The optimal losses of players 11 :</p><formula xml:id="formula_79">v * i (t) = (1 + s f 0 ) p(t) + sg 0 − c v , i = 1, 2.</formula><formula xml:id="formula_80">J * 1 (N e ) = p T 0L 1 (N e ) p 0 = J * 2 (N e ) = p T 0L 2 (N e ) p 0 = − 12.1836; and J * 1 (C e ) = p T 0L 1 (C e ) p 0 = J * 2 (C e ) = p T 0L * 2 (C e ) p 0 = − 12.8162.</formula><p>The toolbox offers a possibility to plot graphs of control, state and output variables' dynamics. To plot graphs for a particular equilibrium the toolbox command plot_graph should be used. 12 <ref type="figure" target="#fig_3">Figure 3</ref> shows the dynamics of the control variables for both players (i.e., output of both firms) for the assumed parameter values, whereas <ref type="figure" target="#fig_4">Fig. 4</ref> shows the dynamics of the state variables (i.e., market price as well as a constant, which is added to the state variables of the system as outlined in Sect. 2).</p><p>Furthermore, as it has been already mentioned, the toolbox offers an option to decompose the loss function of every player into its linear components showing what is each element's contribution to the total outcome. It is especially useful in both model calibration and analysis. When disaggregate losses option is chosen the toolbox creates a dummy player j for every non-zero element φ (a,b),i of matrix i in the loss function of player i. Player j s matrix j has φ (a,b), j as the only non-zero entry. Furthermore, every dummy player is assigned a control variable added to the first state equation of the system with a coefficient 0 so that it does not have any influence on the system. The weight of dummy players' control variables in their loss functions can be defined by the user using the (advanced) option dummy_control_instrument_multiplier (δ) whose default value is 1.</p><p>In the above example, there are 3 non-zero entries in each i matrix, namely, φ <ref type="figure" target="#fig_0">(1,3),1 , φ (3,3)</ref>,1 , and φ <ref type="bibr">(3,</ref><ref type="bibr">5)</ref>,1 in 1 and φ (1,4),2 , φ (4,4),2 and φ (4,5),2 in 2 . Consequently, the toolbox creates 6 dummy players j = 3, 4, 5, 6, 7 and 8 with: </p><formula xml:id="formula_81">3 = ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣</formula><p>0 0 −2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 δ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</p><formula xml:id="formula_82">⎤ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎦</formula><p>and analogous 4 , 5 , 6 , 7 and 8 .</p><p>Furthermore, the toolbox adds 6 new control variables to the model and solves the following game 13 :</p><formula xml:id="formula_83">− min v i J i (v 1 , v 2 , . . . , v 8 ) = − min v i 1 2 ∞ 0 e −θt − p(t)v i (t) + c v v i (t) + 1 2 v 2 i (t) dt, for i = 1, 2 and − min v 3 J 3 (v 1 , v 2 , . . . , v 8 ) = − min v 3 1 2 ∞ 0 e −θt {− p(t)v 1 (t) + v 2 3 (t)}dt, − min v 4 J 3 (v 1 , v 2 , . . . , v 8 ) = − min v 4 1 2 ∞ 0 e −θt 1 2 v 2 1 (t) + v 2 4 (t) dt, − min v 5 J 5 (v 1 , v 2 , . . . , v 8 ) = − min v 5 1 2 ∞ 0 e −θt {− p(t)v 2 (t) + v 2 5 (t)}dt, − min v 6 J 6 (v 1 , v 2 , . . . , v 8 ) = − min v 6 1 2 ∞ 0 e −θt 1 2 v 2 2 (t) + v 2 6 (t) dt, − min v 7 J 7 (v 1 , v 2 , . . . , v 8 ) = − min v 7 1 2 ∞ 0 e −θt {c v v 1 (t) + v 2 7 (t)}dt, − min v 8 J 8 (v 1 , v 2 , . . . , v 8 ) = − min v 8 1 2 ∞ 0 e −θt {c v v 2 (t) + v 2 8 (t)}dt,</formula><p>subject to dynamics:</p><formula xml:id="formula_84">p(t) = s{a − (v 1 (t) + v 2 (t)) − p(t)} + 0v 3 + • • • + 0v 8 , p(0) = p 0 .</formula><p>Since dummy players have no influence on the system then their optimal strategy is to never use the control instrument as it cannot improve their loss. Consequently, all the obtained results will be the same up to additional dimensions in losses corresponding to dummy players. These losses can be always interpreted in terms of the losses of real players. In our example, since v 2 3 (t) and v 2 5 (t) are always zero, J 3 and J 5 can be interpreted as the loss from ∞ 0 e −θt {− p(t)v 1 (t)}dt and ∞ 0 e −θt {− p(t)v 2 (t)}dt obtained by players 1 and 2, respectively. Thus, J * 3 and J * 5 are revenues from sales, whereas J * 4 + J * 7 and J * 6 + J * 8 are costs functions of both oligopolistic firms. For the parametrisation assumed above the toolbox produces the following disaggregation of optimal losses in both regimes: which has the following interpretation: while non-cooperating the first/second company has a revenue with an equilibrium of −J * 3/5 (N e ) = 39.4144 while it incurs a cost of J * 4/6 (N e ) + J * 7/8 (N e ) = 5.3650 + 21.8658 = 27.2308. Total profit for each company is −J * 3/5 (N e ) − J * 4/6 (N e ) − J * 7/8 (N e ) = 12.1836 = J * 1/2 (N e ). In contrast, when companies cooperate, their production is much smaller J * 4/6 (C e ) &lt;&lt; J * 4/6 (N e ) but due to a degree of monopolistic power they are able to obtain higher profits: J * 1/2 (C e ) = 12.8162.</p><formula xml:id="formula_85">N e C</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Example 7.10 of Engwerda (2005) With Multiple Equilibria</head><p>A two-player Example 7.10 from  can be rewritten using the notation outlined in Sect. 2 as follows:</p><formula xml:id="formula_86">A = −0.1 0 0 −2 , B 1 = 1 0 0 1 , B 2 = 1 0 , Q 1 = 1 0 0 0.1 , Q 2 = 1 1 1 2 , R 1 = 2 −1 −1 1 , R 2 = 1, R i j = 0 (i = j), V 1 = V 2 = W 1 = W 2 = 0 0 and N i = 0.</formula><p>Step T1: LQDG Toolbox Initialisation We can rewrite the above example to fit our standard model (30-31) by specifying: P 1 = P 2 = P 3 = P 4i = P 5 = P 6 = P 8 = 0, P 7 = A, P 9i = B i and P 10 = 0 0 .</p><p>Notice that in this example n = m 1 = 2, m 2 = 1 (and therefore m = 3) and b = 0. In the performance specification all parameters are zero for both players, except for φ (1,1),1 = 1; φ (2,2),1 = 0.1; φ (5,5),1 = 2; φ (5,6),1 = −1; φ <ref type="bibr">(6,</ref><ref type="bibr">5)</ref>,1 = −1; and φ (6,6),1 = 1, for the first player, and: φ (1,1),2 = 1; φ (2,1),2 = 1; φ (1,2),2 = 1; φ (2,2),2 = 2; and φ (7,7),2 = 1 for the second player. In this example, we specify the discount rate to be 0.</p><p>Step T2: Model Validation by LQDG Toolbox With this input the toolbox next calculates the standard form (17-18). Clearly, (i) R ii &gt; 0; (ii) (A, B i ) is stabilizable; and (iii) G is invertible (see Appendix A for a definition of G).</p><p>Step T3: Calculation of Equilibria Again, we will follow Algorithm 5 for the noncooperative case where matrix M is:</p><formula xml:id="formula_87">M = − ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣ 0.1 0 1 1 1 0 0 2 1 2 0 0 1 0 −0.1 0 0 0 0 0.1 0 −2 0 0 1 1 0 0 −0.1 0 1 2 0 0 0 −2 ⎤ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎦ .</formula><p>In</p><p>Step A4 of the algorithm, the toolbox determines the spectrum of M. Numerical calculations show that M = T J T −1 , where J is a diagonal matrix with entries λ = {2; −2.2073; −1.0584; 2.0637; −0.1648; 1.4668} and </p><formula xml:id="formula_88">T 2 T 3 T 4 T 5 T 6 ].</formula><p>Matrix M has six different eigenvalues, where three of them are negative, i.e., λ s = {−2.2073; −1.0584; −0.1648}. They correspond to eigenvectors T 2 , T 3 and T 5 . Since no eigenvalue has an algebraic multiplicity higher than one and there are no complex eigenvalues, the toolbox determines in Step A4.2.2.1 of the algorithm that there are at most 3 2 = 3 different equilibrium strategies that permit a feedback synthesis, i.e., As an example, we will calculate the equilibrium strategy that permits a feedback synthesis resulting from P 3 . To that end we factorise P 3 as follows: </p><formula xml:id="formula_89">Cn</formula><formula xml:id="formula_90">λ s = {(−2.2073, −1.0584), (−2.2073, −0.1648), (−1.0584, −0.1648)} orṼ s ∈ {(T 2 , T 3 ), (T 2 , T 5 ), (T 3 , T 5 )}.</formula><formula xml:id="formula_91">P 3 = ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣ −0.</formula><formula xml:id="formula_92">⎡ ⎣ X Y Z ⎤ ⎦ ,</formula><p>where X, Y and Z are 2 × 2 matrices. We obtain then: The key question is whether it is possible to discriminate between multiple equilibria of a particular coalition structure. It is especially important in more complex games, where a practically intractable number of equilibria can be obtained. One of the widely accepted solution concepts to discriminate between various equilibria of a game is Pareto-domination. An equilibrium is said to be Pareto-dominated if it is possible to find another equilibrium in which all the players in the game will not be worse off and at least one of them will be better off. If option discriminate between equilibria using Pareto domination is chosen, the toolbox is going to report a list of Pareto-undominated equilibria. In the above case, it is clear that in the non-cooperative regime equilibrium N e 1 dominates the other two as J 1 (N e 1 ) &lt; J 1 (N e 2 ) &lt; J 1 (N e 3 ) and at the same time J 2 (N e 1 ) &lt; J 2 (N e 2 ) &lt; J 2 (N e 3 ). Consequently, apart from all the equilibria, the toolbox is going to report also a set of Pareto-undominated equilibria which consists of N e 1 . The particular advantage of the Pareto concept is based on the fact that it is in the interest of all the players to play only Pareto -undominated equilibria. However, the downside is that there can be a whole spectrum of them. Because of this, we propose another two ways to discriminate between multiple equilibria. The first method is based on the concept of so called social optimum, i.e., such an equilibrium is chosen that minimises the sum of all the players' losses, or, in our two-player game:</p><formula xml:id="formula_93">P 1 := Y X −1 = −0.</formula><formula xml:id="formula_94">J 1 (N e 1 ) + J 2 (N e 1 ). In our example J 1 (N e 1 ) + J 2 (N e 1 ) &lt; J 1 (N e 2 ) + J 2 (N e 2 ) &lt; J 1 (N e 3 ) + J 2 (N e</formula><p>3 ) so the first equilibrium is chosen when this option is on. The other method we propose to discriminate between multiple equilibria refers to the adjustment speed of the equilibrium closed-loop system towards its long-term equilibrium, measured by the smallest absolute value of the eigenvalues of the A cl matrix that are located in the left half of the complex plane. In our example: Consequently, the toolbox will choose the equilibrium such that their graph subspace consists of eigenvector corresponding to −1.0584, −2.2073, i.e., N e 1 .</p><formula xml:id="formula_95">A cl (N e 1 ) =</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Example 7.12 of Engwerda (2005) With Complex Eigenvalues</head><p>A two-player Example 7.12 from  can be rewritten in terms of notation outlined in Sect. 2 as follows:</p><formula xml:id="formula_96">A = − 1 2 0 0 − 1 4 , B 1 = B 2 = 1 0 0 1 , Q 1 = 1 2 1 1 1 3 , Q 2 = 1 2 2 − 7 9 − 7 9 1 , R −1 1 = 1 2 1 − 7 90 − 7 90 1 , R −1 2 = 1 2 1 − 1 10 − 1 10 3 4 , V 1 = V 2 = W 1 = W 2 = 0 0</formula><p>, and N i = 0.</p><p>Step T1: LQDG Toolbox Initialisation We can rewrite the above example to fit our standard model (30-31) by specifying: P 1 = P 2 = P 3 = P 4i = P 5 = P 6 = P 8 = 0, P 7 = A, P 9i = B i and P 10 = 0 0 .</p><p>Notice that in this example n = m 1 = m 2 = 2 (and therefore m = 4) and b = 0. In the performance specification, all parameters are zero for both players, except for <ref type="bibr">φ (5,6)</ref>,1 = r 12 , φ <ref type="bibr">(6,</ref><ref type="bibr">5)</ref>,1 = r 21 , φ <ref type="bibr">(6,</ref><ref type="bibr">6)</ref>,1 = r 22 , φ (1,1),2 = 1, φ (1,2),2 = − 7 18 , φ (2,1),2 = − 7 18 , φ (2,2),2 = 1 2 , φ (7,7),2 = s 11 , φ <ref type="bibr">(7,</ref><ref type="bibr">8)</ref> for the first and second players, respectively. Also in this example, we specify the discount rate to be 0.</p><formula xml:id="formula_97">φ (1,1),1 = 1 2 , φ (1,2),1 = 1 2 , φ (2,1),1 = 1 2 , φ (2,2),1 = 3 2 , φ (5,5),1 = r 11 ,</formula><p>Step T2: Model Validation by LQDG Toolbox With this input, the toolbox next calculates the standard form (17-18) and checks that both Q i and R i are positive definite, (A, B i ) are stabilizable and G is invertible.</p><p>Step T3: Calculation of Equilibria Again, we will follow Algorithm 5 for the noncooperative case. We have that:</p><formula xml:id="formula_98">M = − ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣</formula><p>0.5000 0.0000 0.5000 −0.0389 0.5000 −0.0500 0.0000 0.2500 −0.0389 0.5000 −0.0500 0.3750 0.5000 0.5000 −0.5000 0.0000 0.0000 0.0000 0.5000 1.5000 0.0000 −0.2500 0.0000 0.0000 1.0000 −0.3889 0.0000 0.0000 −0.5000 0.0000 −0.3889 0.5000 0.0000 0.0000 0.0000 −0.2500</p><formula xml:id="formula_99">⎤ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎦ .</formula><p>In</p><p>Step A4 of the algorithm the toolbox determines the spectrum of M. Numerical calculations show that M = T J T −1 , where J is a diagonal matrix with entries λ = {−1.0004 + 0.0227i; −1.0004 − 0.0227i; 0.2525; 0.4983; 1; 1} and Matrix M has two (complex) eigenvalues with a negative real part. Let x be the real part of the eigenvector corresponding with the eigenvalue −1.0004 + 0.0227i and y the imaginary part of this eigenvector</p><formula xml:id="formula_100">T = ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣ 0.1358 + 0.4406i 0.1358 − 0.4406i −</formula><p>x <ref type="bibr">T := [0.1358, 0.4499, 0.1966, 0.5940</ref> The with these actions corresponding closed-loop system matrix is then:</p><p>A cl := −1.0004 0.0222 −0.0231 −1.003 .</p><p>The eigenvalues of this matrix are {−1.0004 + 0.0227i; −1.0004 − 0.0227i}. The corresponding equilibrium costs are J 1 (N e ) = x T 0L 1 (N e )x 0 = 1 2 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Concluding Remarks</head><p>In this paper we considered a dynamic linear affine structural form model that is affected by different players who all like to minimise their own performance criterion that is a quadratic affine function of the variables occurring in the model. The costs are assumed to be discounted over time and the considered planning horizon by the players is assumed to be infinite. Under the assumption that in the minimisation of their performance the players do not cooperate, we presented both necessary and sufficient conditions under which this problem has a unique open-loop Nash equilibrium, a multiple but finite number of equilibria and or an infinite number of equilibria. A computational framework was provided for how one can numerically solve the problem. The algorithm has been implemented in a form of a numerical toolbox available on the internet. Users, starting from the structural model, can calculate for their specific application the equilibrium strategies and involved cost (if they exist). The toolbox also provides the possibility to calculate for different coalition structures whether the corresponding game will have an open-loop Nash solution. For that purpose the user has to define which coalition structures they like to analyze and what the relative importance is of each player within a certain coalition. We demonstrated both theoretically and numerically in a worked example on dynamic duopolistic competition the use of the toolbox. LQDG Toolbox is implemented in MATLAB. In particular, it uses some standard functions of MATLAB to calculate the eigenstructure of a (|N |n) × (|N |n) matrix, where |N | is the number of involved players andn is the state dimension of the model. Since no additional efforts are taken to calculate this eigenstructure in a numerically efficient way, the practical use of the current toolbox is limited to some extent. This is because for either a large number of players and/or a large state dimension, the accuracy and efficiency is restricted by that of the implemented MATLAB functions. So for large N and/orn the user should look for an own code to implement the algorithm. Another way one might choose to calculate the equilibrium strategies is by using iterative algorithms. In the literature a number of iterative schemes have been suggested (see e.g. <ref type="bibr" target="#b5">Engwerda 2007)</ref>. A disadvantage of these schemes is that on the one hand they do not provide an answer to the question whether the game will have a unique equilibrium. On the other hand these schemes may converge without providing the appropriate equilibrium strategy. If this happens one is stuck with the question how to proceed.</p><p>For the corresponding problem with a finite planning horizon, at least from a theoretical point, it is clear under which conditions there exists a unique equilibrium (see e.g. . From a computational point it is also clear how one can calculate this equilibrium. Either one can solve the involved set of nonlinear differential two-point boundary-value equations directly using standard MATLAB functions. Another possibility is to transform the involved set of Riccati differential equations (in the spirit of <ref type="bibr" target="#b17">Reid (1972)</ref>) to a set of linear differential equations and then solve this set first (see e.g. <ref type="bibr" target="#b21">Tabak 1975;</ref><ref type="bibr" target="#b5">Engwerda 2007)</ref>. Since the calculations require the numerical solution of a set of (nonlinear) differential equations the dimension of the games for which one can still calculate the equilibrium actions (using standard MATLAB functions) without problems is usually smaller than in the infinite horizon case.</p><p>In the literature, also different equilibrium concepts have been studied for games considered above. Probably the most well-known is the feedback Nash concept. Unfortunately, for this case there are no general conditions known, except for the scalar case, i.e.,n = 1 (see e.g.  under which the game has a unique feedback Nash equilibrium.</p><p>Finally, we would like to mention that for discrete time systems much work has been done by Neck et al. in the development of the numerical software OPTGAME for the calculation of Nash equilibria in (non-)linear systems in case the performances of players are quadratic (see e.g. <ref type="bibr" target="#b14">Neck et al. 2001</ref>).</p><p>and set: φ (1,1),i = 5, φ (2,6),i = − 1 2 , φ <ref type="bibr">(3,n+3)</ref>,i = α 1 , φ (n+2,n+3),i = α 1 , φ <ref type="bibr">(3,2n+b+2)</ref>,i = 1, φ (2n+b+i,2n+b+2),i = 2, φ (2n+b+i,2n+b+i),i = √ 3, and φ (2n+b+m+1,2n+b+m+1),i = 4.</p><p>Of course, instead of φ (2,6),i = − 1 2 one might as well set φ (6,2),i = − 1 2 or φ (2,6),i = − 1 4 and φ <ref type="bibr">(6,</ref><ref type="bibr">2)</ref>,i = − 1 4 or any other linear combination that sums up to − 1 2 .</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1</head><label>1</label><figDesc>Scheme of the LQDG Toolbox software</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2</head><label>2</label><figDesc>Main window of the User Input Interface LQDG Toolbox offers an opportunity to control and verify every important intermediate step of the solution process as well as the results obtained. The list of all the available options can be edited in the user interface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>For</head><label></label><figDesc>the parameters' values: a = 4, s = 0.1, c v = 1.5, θ = 0.05 and initial condition p 0 = [3] , the toolbox produces the following numerical values (N e non-cooperative and C e cooperative equilibrium between players): 1. The equilibrium actions: C L * (N e ) = 0.8042 −1.4385 0.8042 −1.4385 and C L * (C e ) = 0equations' solutions (see Eq. 29 in Step A5 of the algorithm) 10 :</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3</head><label>3</label><figDesc>Control variables in the duopoly game (non-cooperative equilibrium)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4</head><label>4</label><figDesc>State variable and constant in the duopoly game (non-cooperative equilibrium)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>, −0.0211, 0.1341] and y T := [0.4406, −0.1379, 0.0979, 0, 0.3279, −0.1964].The invariant subspace corresponding with eigenvalues {−1.0004 + 0.0227i; −1.0004 − 0.0227i} is S =Im[x y]. According to Sect. 2, the unique equilibrium actions are u * i (t)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>The set of coupled algebraic Riccati equations (21) has a strongly stabilizing solution, and 2. the two algebraic Riccati equations (20) have a (strongly) stabilizing solution.</figDesc><table><row><cell>1.</cell></row><row><cell>The set of algebraic Riccati equations (21) has a strongly stabilizing</cell></row><row><cell>solutionP if and only if matrix M has ann-dimensional stable graph subspace</cell></row><row><cell>and M has 2n eigenvalues (counting algebraic multiplicities) with a real part</cell></row><row><cell>larger than or equal to zero.</cell></row><row><cell>2. If the set of algebraic Riccati equations (21) has a strongly stabilizing solution,</cell></row><row><cell>then it is unique.</cell></row><row><cell>A proof of both this lemma and the next theorem follow directly from Engwerda</cell></row><row><cell>(2008).</cell></row><row><cell>Theorem 3 Consider the differential game (17-18) with symmetric M i , R ii &gt; 0,</cell></row><row><cell>invertible matrix G and (A, B i ) stabilizable.</cell></row><row><cell>This game has a unique open-loop Nash equilibrium for every initial state if and only if</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>The set of coupled algebraic Riccati equations (21) has a stabilizing solution, and 2. the two algebraic Riccati equations (20) have a stabilizing solution. Moreover, ifP is stabilizing solution of (21), the actions (24) yield an open-loop Nash equilibrium that can be synthesised as a state feedback. The corresponding costs are given by (25).</figDesc><table><row><cell>Theorem 4 The differential game (17-18), with M i symmetric, R ii &gt; 0, matrix G</cell></row><row><cell>invertible and (A, B i ) stabilizable, has for every initial state an open-loop Nash set of equilibrium actions (u  *  1 , u  *  2 ) which permit a feedback synthesis if and only if</cell></row><row><cell>1.</cell></row></table><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Go to Step A5. A4.2.2: If s &gt;n and: A4.2.2.1: If there are no complex eigenvalues then: • Calculate the set Cn λ s of all stable eigenvalues that have the property where if λ s i contains a complex eigenvalue it contains the complex conjugate of this eigenvalue too. • For every such combination λ s</figDesc><table><row><cell>s! (s−n)!n!n -element combinations from s stable eigenvalues;</cell></row><row><cell>• For every combination λ s i ∈ Cn λ s : (i) letṼ s i be</cell></row><row><cell>the matrix which columns consist of eigenvec-</cell></row><row><cell>tors corresponding with eigenvalues from the</cell></row><row><cell>set λ s</cell></row></table><note>For both cases: go to Step A6. Otherwise proceed with Step A4.2. A4.2: All stable eigenvalues have an algebraic multiplicity of one. A4.2.1: Case s =n. Let λ s denote the set of all stable eigenvalues andṼ s denote the matrix which columns consist of the eigenvectors corresponding with these stable eigenvalues. A4.2.1.1: If λ s contains no complex eigenvalues then the image ofṼ s represents then-dimensional sta- ble invariant subspace of M. Go to Step A5. A4.2.1.2: If λ s contains complex eigenvalues then replace every pair of conjugate complex eigenvectors x + iy and x − iy inṼ s by the real part of this eigenvector, x, and the imaginary part, y, respectively (see Example 6 below for further details). The image of this modified real matrix represents then then -dimensional stable invari- ant subspace of M.i ; (ii) go to Step A5. A4.2.2.2: If there are complex eigenvalues then: • Calculate the set Cn λ s of alls! (s−n)!n!n -element combinations from s</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>number of equilibria, intermediate matrices constructed during the solution process (H 1 , H 2 , H 3 and M) and eigenvalues; • output actions; • closed-loop matrices A cl ; • solution of Lyapunov equationsL i for every player; and • loss J i for every player.</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>Example 6 Let N = {1, 2, 3, 4}. Listing all the possible partitions of the set N into coalitions, we obtain:[1234], [123|4], [124|3], [134|2], [1|234], [12|3|4], [13|2|4], [14|2|3], [23|1|4], [24|1|3], [1|2|34], [12|34], [13|24], [14|23], [1|2|3|4].Indeed, using simple recursive software to compute Dobinsky's formula we obtain: B 4 = 15. The number of possible partitions increases exponentially when n increases linearly. For |N | = 1, 2, . . . , 15, we have the following numbers of coalitions according to Dobinski's formula:</figDesc><table /><note></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head></head><label></label><figDesc>This matrix is invertible. P 1 is an element of P pos and σ (M| P 1 ) = {−2.2073, −1.0584}. In a similar way it can be verified that P 2 := Im[T 2 T 5 ] and P 3 := Im[T 3 T 5 ] are also appropriate graph subspaces. On the whole, all three M-invariant subspaces satisfy all conditions.</figDesc><table><row><cell></cell><cell>For all three combinations of two eigenvectorsṼ s the</cell></row><row><cell cols="2">toolbox executes Step A5.</cell></row><row><cell cols="2">Consider P 1 := Im[T 2 T 3 ]. The first 2 × 2 block of this matrix equals</cell></row><row><cell>0.2724 −0.6261 0.7391 0.5368</cell><cell>.</cell></row></table><note></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">A dedicated webpage will be available on-line soon. Mean while contact T. Michalak for obtaining the software. 2 A state-feedback strategy can be expressed as a linear function of the state variables of the model. Specifically, if we denote a vector of state variables by x, a state-feedback strategy can be written as F x, where F is a real valued function of appropriate dimension.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">See alsoEngwerda (2005, Chap. 7).</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4">σ (H ) denotes the spectrum of matrix H ; C − = {λ ∈ C | Re(λ) &lt; 0}.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5">Notice that we just present those equilibria that can be synthesized as a feedback strategy.6  With an equilibrium we mean everywhere in the algorithm an equilibrium that can be synthesized as a state feedback.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7">See Chapter 5 of<ref type="bibr" target="#b16">Plasmans et al. (2006)</ref> for more details on this issue.8  For less than 6 players LQDG Toolbox has predefined sets of all coalition structures so that the user does not have to define them himself.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9">Note that y(t) is not taken into account in vector z(t) in the cost criteria in Step T1 as y(t) := 0. Toolbox automatically extends matrices 1 and 2 by two appropriate zero vectors.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="11">Note that it is not possible to calculate the analytic solution of the corresponding Lyapunov equations, so it is not possible to calculate the analytic formulas for players' losses.12 See the toolbox manual for more details.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="13">Note that dummy players which corresponds to elements that involve a constant are always positioned last.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgments Tomasz Michalak acknowledges support from (a) the EPSRC under the project ALADDIN (Autonomous Learning Agents for Decentralised Data and Information Systems) project and is jointly funded by a BAE Systems and EPSRC strategic partnership; and (b) the FWO (Fonds voor Wetenschappelijk Onderzoek Vlaanderen, Belgium).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix A: Notation</head><p>The following shorthand notation is used:</p><p>where we assume throughout that this matrix G is invertible. Furthermore:</p><p>Notice that:</p><p>where:</p><p>Matrices H 1 , H 2 , H 3 and G to construct the M are stored in the LQDG Toolbox output file. <ref type="bibr">. . . . . . . . . . . φ (2n+b+m,2n+b+1)</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix B: Cost Function Submatrices</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix C: Defining Linear Quadratic Loss Function in the Input File</head><p>If the user chooses to create by themselves the input file, the linear-quadratic loss of every player in the game should be defined as follows. According to the definition of vector z(t), i.e., z(t) := [ p(t)ṗ(t) y(t) v(t) c] T , coefficient φ (in the loss of player i) that regards: (i) variable p 1≤k≤n has an index (k, .), i, i.e. , φ (k,.),i ; (ii) variableṗ 1≤k≤n has an index (n + k, .), i, i.e., φ (n+k,.),i ; (iii) variable y 1≤k≤b has an index (2n + k, .), i, i.e., φ (2n+k,.),i ; (iv) variable v 1≤k≤m has an index (2n + b + k, .), i, i.e., φ (2n+b+k,.),i ; and (v) variable c has an index (2n + b + m + 1, .), i, i.e., φ (2n+b+m+1,.),i .</p><p>For example, to define in the toolbox the following loss function of player i:</p><p>where α 1 is some parameter, we need to simplify it first into linear quadratic form:</p><p>i + 4 e −θ t dt,</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Analytic solution for a class of linear quadratic open-loop Nash games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Abou-Kandil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bertrand</surname></persName>
		</author>
		<idno type="DOI">10.1080/00207178608933518</idno>
	</analytic>
	<monogr>
		<title level="j">International Journal of Control</title>
		<title level="j" type="abbrev">International Journal of Control</title>
		<idno type="ISSN">0020-7179</idno>
		<idno type="ISSNe">1366-5820</idno>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="997" to="1002" />
			<date type="published" when="1986-03" />
			<publisher>Informa UK Limited</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Iterative solution of algebraic matrix Riccati equations in open loop Nash games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Teresa</forename><forename type="middle">Paula</forename><surname>Azevedo-Perdicoúlis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerhard</forename><surname>Jank</surname></persName>
		</author>
		<idno type="DOI">10.1002/rnc.966</idno>
		<idno type="ark">ark:/67375/WNG-HJV69SMN-K</idno>
		<idno type="istexId">54D622AA4284304106830B716FDD85723C1DC4B6</idno>
	</analytic>
	<monogr>
		<title level="j">International Journal of Robust and Nonlinear Control</title>
		<title level="j" type="abbrev">Int. J. Robust Nonlinear Control</title>
		<idno type="ISSN">1049-8923</idno>
		<idno type="ISSNe">1099-1239</idno>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="55" to="62" />
			<date type="published" when="2004" />
			<publisher>Wiley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Dynamic Noncooperative Game Theory, 2nd Edition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tamer</forename><surname>Başar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geert</forename><forename type="middle">Jan</forename><surname>Olsder</surname></persName>
		</author>
		<idno type="DOI">10.1137/1.9781611971132</idno>
		<editor>SIAM. Comtet, L.</editor>
		<imprint>
			<date type="published" when="1998-01" />
			<publisher>Society for Industrial and Applied Mathematics</publisher>
			<pubPlace>Philadelphia; Dordrecht</pubPlace>
		</imprint>
	</monogr>
	<note>Advanced combinatorics</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Differential Games in Economics and Management Science</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Engelbert</forename><forename type="middle">J</forename><surname>Dockner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steffen</forename><surname>Jorgensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ngo</forename><surname>Van Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerhard</forename><surname>Sorger</surname></persName>
		</author>
		<idno type="DOI">10.1017/cbo9780511805127</idno>
	</analytic>
	<monogr>
		<title level="m">Differential games in economics and management science</title>
		<meeting><address><addrLine>Cambridge</addrLine></address></meeting>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">LQ dynamic optimization and differential games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Engwerda</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>Chichester: Wiley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Algorithms for Computing Nash Equilibria in Deterministic LQ Games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacob</forename><forename type="middle">C</forename><surname>Engwerda</surname></persName>
		</author>
		<idno type="DOI">10.2139/ssrn.946935</idno>
		<ptr type="open-access" target="https://pure.uvt.nl/ws/files/780275/109.pdf" />
	</analytic>
	<monogr>
		<title level="j">SSRN Electronic Journal</title>
		<title level="j" type="abbrev">SSRN Journal</title>
		<idno type="ISSNe">1556-5068</idno>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="113" to="140" />
			<date type="published" when="2006" />
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Uniqueness conditions for the affine open-loop linear quadratic differential game</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacob</forename><forename type="middle">C</forename><surname>Engwerda</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.automatica.2007.06.006</idno>
	</analytic>
	<monogr>
		<title level="j">Automatica</title>
		<title level="j" type="abbrev">Automatica</title>
		<editor>E. F. Camacho, et al.</editor>
		<idno type="ISSN">0005-1098</idno>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="504" to="511" />
			<date type="published" when="2008-02" />
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Dynamic Duopolistic Competition with Sticky Prices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chaim</forename><surname>Fershtman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Morton</forename><forename type="middle">I</forename><surname>Kamien</surname></persName>
		</author>
		<idno type="DOI">10.2307/1911265</idno>
		<ptr type="open-access" target="http://pdfs.semanticscholar.org/f903/301018060146bcbaca899a5e46606e308514.pdf" />
	</analytic>
	<monogr>
		<title level="j">Econometrica</title>
		<title level="j" type="abbrev">Econometrica</title>
		<idno type="ISSN">0012-9682</idno>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page">1151</biblScope>
			<date type="published" when="1987-09" />
			<publisher>JSTOR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Linear-quadratische Differentialspiele und gekoppelte Riccatische Matrixdifferentialgleichungen</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Feucht</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
			<pubPlace>Germany</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Universität Ulm</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. Thesis</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Differential Games in Marketing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steffen</forename><surname>Jørgensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georges</forename><surname>Zaccour</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-1-4419-8929-1</idno>
		<imprint>
			<date type="published" when="2004" />
			<publisher>Springer US</publisher>
			<pubPlace>Deventer</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Non-symmetric Riccati theory and noncooperative games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kremer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<pubPlace>Germany</pubPlace>
		</imprint>
		<respStmt>
			<orgName>RWTH-Aachen</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. Thesis</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A Schur method for solving algebraic Riccati equations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Laub</surname></persName>
		</author>
		<idno type="DOI">10.1109/tac.1979.1102178</idno>
		<ptr type="open-access" target="https://dspace.mit.edu/bitstream/1721.1/1301/1/R-0859-05666488.pdf" />
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Automatic Control</title>
		<title level="j" type="abbrev">IEEE Trans. Automat. Contr.</title>
		<idno type="ISSN">0018-9286</idno>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="913" to="921" />
			<date type="published" when="1979-12" />
			<publisher>Institute of Electrical and Electronics Engineers (IEEE)</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Invariant Subspace Methods for the Numerical Solution of Riccati Equations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alan</forename><forename type="middle">J</forename><surname>Laub</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-642-58223-3_7</idno>
		<idno type="ark">ark:/67375/HCB-VQCMSW82-S</idno>
		<idno type="istexId">2133A0FE899948BAFB217830CADF4FD21E964599</idno>
	</analytic>
	<monogr>
		<title level="m">The Riccati Equation</title>
		<editor>S. Bittanti, A. Laub, &amp; J. Willems</editor>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer Berlin Heidelberg</publisher>
			<date type="published" when="1991" />
			<biblScope unit="page" from="163" to="196" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The autonomous linear quadratic control problem: Theory and numerical solution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">L</forename><surname>Mehrmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Lecture notes in control and information sciences 163</title>
		<editor>M. Thoma &amp; A. Wyner</editor>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Solving dynamic macroeconomic policy games using the algorithm OPTGAME 1.0</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Neck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hager</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Behrens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Optimal Control Applications and Methods</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="301" to="332" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A Schur decomposition for Hamiltonian matrices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Paige</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Van Loan</surname></persName>
		</author>
		<idno type="DOI">10.1016/0024-3795(81)90086-0</idno>
	</analytic>
	<monogr>
		<title level="j">Linear Algebra and its Applications</title>
		<title level="j" type="abbrev">Linear Algebra and its Applications</title>
		<idno type="ISSN">0024-3795</idno>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="11" to="32" />
			<date type="published" when="1981-12" />
			<publisher>Elsevier BV</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Dynamic modeling of monetary and fiscal cooperation among nations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Plasmans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Engwerda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Van Aarle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Di Bartolomeo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Michalak</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Reid</surname></persName>
		</author>
		<title level="m">Riccati differential equations</title>
		<meeting><address><addrLine>London</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1972" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">On the solution of the open-loop Nash Riccati equations in linear quadratic differential games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Simaan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Cruz</surname></persName>
		</author>
		<idno type="DOI">10.1080/00207177308932486</idno>
	</analytic>
	<monogr>
		<title level="j">International Journal of Control</title>
		<title level="j" type="abbrev">International Journal of Control</title>
		<idno type="ISSN">0020-7179</idno>
		<idno type="ISSNe">1366-5820</idno>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="57" to="63" />
			<date type="published" when="1973-07" />
			<publisher>Informa UK Limited</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Nonzero-sum differential games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">W</forename><surname>Starr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">C</forename><surname>Ho</surname></persName>
		</author>
		<idno type="DOI">10.1007/bf00929443</idno>
		<idno type="ark">ark:/67375/1BB-HHJ49BSX-D</idno>
		<idno type="istexId">29A31E2C790E59E27E69E493E3EAD729B4BE73E5</idno>
	</analytic>
	<monogr>
		<title level="j">Journal of Optimization Theory and Applications</title>
		<title level="j" type="abbrev">J Optim Theory Appl</title>
		<idno type="ISSN">0022-3239</idno>
		<idno type="ISSNe">1573-2878</idno>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="184" to="206" />
			<date type="published" when="1969-03" />
			<publisher>Springer Nature</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Further properties of nonzero-sum differential games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">W</forename><surname>Starr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">C</forename><surname>Ho</surname></persName>
		</author>
		<idno type="DOI">10.1007/bf00926523</idno>
		<idno type="ark">ark:/67375/1BB-HT3PXWMG-Z</idno>
		<idno type="istexId">6A33E84FECB1856EE54B87911A3D327466DCDDF4</idno>
	</analytic>
	<monogr>
		<title level="j">Journal of Optimization Theory and Applications</title>
		<title level="j" type="abbrev">J Optim Theory Appl</title>
		<idno type="ISSN">0022-3239</idno>
		<idno type="ISSNe">1573-2878</idno>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="207" to="219" />
			<date type="published" when="1969-04" />
			<publisher>Springer Nature</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Numerical solutions of differential game problems†</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tabak</surname></persName>
		</author>
		<idno type="DOI">10.1080/00207727508941841</idno>
	</analytic>
	<monogr>
		<title level="j">International Journal of Systems Science</title>
		<title level="j" type="abbrev">International Journal of Systems Science</title>
		<idno type="ISSN">0020-7721</idno>
		<idno type="ISSNe">1464-5319</idno>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="591" to="599" />
			<date type="published" when="1975-06" />
			<publisher>Informa UK Limited</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A Generalized Eigenvalue Approach for Solving Riccati Equations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dooren</surname></persName>
		</author>
		<idno type="DOI">10.1137/0902010</idno>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Scientific and Statistical Computing</title>
		<title level="j" type="abbrev">SIAM J. Sci. and Stat. Comput.</title>
		<idno type="ISSN">0196-5204</idno>
		<idno type="ISSNe">2168-3417</idno>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="121" to="135" />
			<date type="published" when="1981-06" />
			<publisher>Society for Industrial &amp; Applied Mathematics (SIAM)</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>

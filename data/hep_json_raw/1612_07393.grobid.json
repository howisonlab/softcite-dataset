{
    "level": "paragraph",
    "abstract": [
        {
            "text": "NUISANCE is an open source C++ framework which facilitates detailed studies of neutrino interaction cross-section models implemented in Monte Carlo neutrino event generators. It provides a host of automated methods to perform comparisons of multiple generators to published cross-section measurements and each other. External reweighting libraries are used to allow the end-user to evaluate the impact of model parameters variations in the generators with data, or to tune the generator predictions to arbitrary dataset combinations. The design is modular and focusses on ease-of-use to allow new datasets and more generators to be added without requiring detailed understanding of the entire NUISANCE package. We discuss the motivation for the NUISANCE framework and suggested usage cases, alongside a description of its core structure.",
            "paragraph_rank": 1,
            "section_rank": 1
        }
    ],
    "body_text": [
        {
            "text": "Prepared for submission to JINST NUISANCE: a neutrino cross-section generator tuning and comparison framework",
            "paragraph_rank": 2,
            "section_rank": 2
        },
        {
            "text": "l A a L * 1",
            "paragraph_rank": 3,
            "section_rank": 2
        },
        {
            "text": "Introduction",
            "section_rank": 3
        },
        {
            "section": "Introduction",
            "text": "Current and future neutrino oscillation experiments have stringent systematic error budgets, which are considerably smaller than are currently achievable. In particular, the uncertainties associated with neutrino interaction cross-section models need to be reduced down to the few percent level to deliver the required sensitivy; required cross-section uncertainties of 4% and 2% have been projected for T2K-II and DUNE respectively [1,2]. Long baseline oscillation experiments spanning the 0.1 \u2264 E \u03bd \u2264 10 GeV range suffer especially, as at these energies a consistent theoretical interaction picture has yet to emerge [3][4][5]. Selecting default interaction models from those available and estimating parameter uncertainties are significant challenges currently facing neutrino oscillation and cross-section experiments. Two main issues complicate the problem of building a consistent neutrino cross-section model when using nuclear targets. Firstly, the interaction-level variables which cross-section models are constructed in terms of (e.g., energy and momentum transfer, neutrino energy) cannot be directly measured by experiments. The incoming neutrino four-momentum is not known on an event-by-event basis from the beam, nor can it be reconstructed accurately by using final-state particle kinematics without relying on the experiment's model for nuclear effects, such as initial state nucleon model and particle propagation. The only measurable model-independent quantities are the outgoing particle kinematics (e.g., outgoing muon momentum and direction). Secondly, Final State Interactions (FSI)-where the particles leaving the interaction vertex re-interact before leaving the nucleus-can modify the outgoing particle kinematics and event particle content. It is not possible to separate a single interaction process with selection cuts: a simple \u03bd \u00b5 + n \u2192 \u00b5 \u2212 + p Charged-Current Quasi-Elastic (CCQE) interaction cannot be clearly distinguished from a \u03bd \u00b5 + p \u2192 \u00b5 \u2212 + \u03c0 + + p interaction if the pion is absorbed in the nucleus. As a result, model-independent measurements must, in general, describe a final-state topological cross section rather than a single interaction mode cross section-such as measuring events with one muon and no pions in the final state (CC0\u03c0 interactions) in lieu of CCQE interactions.",
            "paragraph_rank": 4,
            "section_rank": 3,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b0",
                    "start": 433,
                    "text": "[1,",
                    "end": 436
                },
                {
                    "type": "bibr",
                    "ref_id": "b1",
                    "start": 436,
                    "text": "2]",
                    "end": 438
                },
                {
                    "type": "bibr",
                    "ref_id": "b2",
                    "start": 619,
                    "text": "[3]",
                    "end": 622
                },
                {
                    "type": "bibr",
                    "ref_id": "b3",
                    "start": 622,
                    "text": "[4]",
                    "end": 625
                },
                {
                    "type": "bibr",
                    "ref_id": "b4",
                    "start": 625,
                    "text": "[5]",
                    "end": 628
                }
            ]
        },
        {
            "section": "Introduction",
            "text": "A number of general purpose neutrino interaction Monte Carlo (MC) event generators are available, simulating a large range of interactions. These make it possible to produce realistic predictions for topological cross-section measurements, and allow the user to modify model parameters and combine different models. Whilst model-independent measurements are essential for arriving at a well-motivated cross-section model with defensible uncertainties, topological cross sections given in terms of final-state particle kinematics provide relatively weak constraints of cross-section model parameters which often have most strength in interaction variables such as four-momentum transfer. This is complicated by the fact that different detector sensitivities and kinematic thresholds mean experiments may probe vastly different regions of phase-space for an observed interaction channel. Therefore model parameters extrapolated from one experiment may not be sufficient to describe all other experiments. Hence it is essential to use data from many experiments, with different energies, target materials and detector designs to constrain a full cross-section model and claim confidence in it. NUISANCE is a software package written to simplify the task of confronting and comparing neutrino event generators with each other and published world cross-section data. It is an open source C++ package distributed under the GPLv3 license agreement [6]. NUI-SANCE is the primary tool for evaluating and constraining the cross-section model used in T2K analyses [7] using external scattering data, and grew out of efforts to tune the NEUT interaction model within the T2K Neutrino Interactions Working Group. The main advantage of this framework is its modularity: new datasets can be included with ease by adding \"measurement\" classes which converts any supported generator's output to a cross-section and compares it to data, without requiring the user to understand the output formats of the generators. Similarly, new generators can be added without requiring detailed understanding of the entire NUISANCE framework. The only dependency of NUISANCE outside the chosen generator(s) themselves is the ROOT library [8].",
            "paragraph_rank": 5,
            "section_rank": 3,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b5",
                    "start": 1441,
                    "text": "[6]",
                    "end": 1444
                },
                {
                    "type": "bibr",
                    "ref_id": "b6",
                    "start": 1553,
                    "text": "[7]",
                    "end": 1556
                },
                {
                    "type": "bibr",
                    "ref_id": "b7",
                    "start": 2207,
                    "text": "[8]",
                    "end": 2210
                }
            ]
        },
        {
            "section": "Introduction",
            "text": "In this paper, we describe the core structure of NUISANCE, give the scope of the supported features, and demonstrate different usage scenarios. Detailed documentation of included datasets, validation plots, and usage instructions with examples can be found at nuisance.hepforge.org.",
            "paragraph_rank": 6,
            "section_rank": 3
        },
        {
            "text": "NUISANCE",
            "section_rank": 4
        },
        {
            "section": "NUISANCE",
            "text": "This section gives an overview of the core structure and design principles behind the NUI-SANCE framework. Full support for the standard output of the GENIE [9,10], NEUT [11], NuWro [12] and GiBUU [13] neutrino event generators is provided, with limited support for NUANCE 1  [14]. The core structure is designed to be easily extended, with support for different event generators possible in later versions (e.g. neutrino, electron and pion scattering simulations).",
            "paragraph_rank": 7,
            "section_rank": 4,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b8",
                    "start": 157,
                    "text": "[9,",
                    "end": 160
                },
                {
                    "type": "bibr",
                    "ref_id": "b9",
                    "start": 160,
                    "text": "10]",
                    "end": 163
                },
                {
                    "type": "bibr",
                    "ref_id": "b10",
                    "start": 170,
                    "text": "[11]",
                    "end": 174
                },
                {
                    "type": "bibr",
                    "ref_id": "b11",
                    "start": 182,
                    "text": "[12]",
                    "end": 186
                },
                {
                    "type": "bibr",
                    "ref_id": "b12",
                    "start": 197,
                    "text": "[13]",
                    "end": 201
                },
                {
                    "type": "bibr",
                    "ref_id": "b0",
                    "start": 273,
                    "text": "1",
                    "end": 274
                },
                {
                    "type": "bibr",
                    "ref_id": "b13",
                    "start": 276,
                    "text": "[14]",
                    "end": 280
                }
            ]
        },
        {
            "text": "Input handling",
            "section_rank": 5
        },
        {
            "section": "Input handling",
            "text": "Each event generator has a different output format and event structure, but the underlying content is the same, always including:",
            "paragraph_rank": 8,
            "section_rank": 5
        },
        {
            "section": "Input handling",
            "text": "\u2022 a list of incoming/outgoing particles, with their four-momentum, PDG code, and status;",
            "paragraph_rank": 9,
            "section_rank": 5
        },
        {
            "section": "Input handling",
            "text": "\u2022 an underlying interaction mode used in the generation 2 , e.g.\u03bd \u00b5 -12 C CCQE, \u03bd e -16 O CC1\u03c0 + ;",
            "paragraph_rank": 10,
            "section_rank": 5
        },
        {
            "section": "Input handling",
            "text": "\u2022 a method for normalising the event distribution to produce a differential cross section;",
            "paragraph_rank": 11,
            "section_rank": 5
        },
        {
            "section": "Input handling",
            "text": "\u2022 (optional) information to support event reweighting, described in Section 2.4.",
            "paragraph_rank": 12,
            "section_rank": 5
        },
        {
            "section": "Input handling",
            "text": "[GeV]  Figure 1: Shape comparison of CC-inclusive \u03bd \u00b5 -CH 2 events generated in different versions of the NEUT, NuWro, and GENIE generators using the MiniBooNE neutrino-mode flux [15] (shown in Figure 2).",
            "paragraph_rank": 13,
            "section_rank": 5,
            "ref_spans": [
                {
                    "type": "figure",
                    "ref_id": "fig_0",
                    "start": 7,
                    "text": "Figure 1",
                    "end": 15
                },
                {
                    "type": "bibr",
                    "ref_id": "b14",
                    "start": 179,
                    "text": "[15]",
                    "end": 183
                },
                {
                    "type": "figure",
                    "start": 194,
                    "text": "Figure 2",
                    "end": 202
                }
            ]
        },
        {
            "section": "Input handling",
            "text": "To ensure consistency between generators, and to increase speed, NUISANCE uses a reduced event structure that contains only the information required and unifies the format for the various generators. The conversion to the standardised format is performed by the InputHandler class when an event is first used and all subsequent NUISANCE functionality uses this format. The structure provides access to information about the event using common caller functions which are unified for the generators. It also ensures compatibility were new generators to be added to the InputHandler in the future. ",
            "paragraph_rank": 14,
            "section_rank": 5
        },
        {
            "text": "Cross section normalisation",
            "section_rank": 6
        },
        {
            "section": "Cross section normalisation",
            "text": "The NUISANCE InputHandler calculates all the information needed to weight events correctly such that the final distribution is normalised to an inclusive cross-section prediction. In the case of GiBUU, these weights are calculated by the generator itself and saved with the event. For the other generators-where the number of events from different interaction channels are generated in proportion to their cross section-a single weight is calculated which is applied to all events. NUISANCE requires the flux distribution used to generate the sample, \u03c6(E \u03bd ), and calculates the predicted total event rate per target nucleon, R, from information available in the generator output file,",
            "paragraph_rank": 15,
            "section_rank": 6
        },
        {
            "section": "Cross section normalisation",
            "text": "Flux Spectrum (Arb. Norm) Figure 2: Flux distributions used to generated events for NUISANCE comparisons in this work [16][17][18][19], also supplied with NUISANCE.",
            "paragraph_rank": 16,
            "section_rank": 6,
            "ref_spans": [
                {
                    "type": "figure",
                    "start": 26,
                    "text": "Figure 2",
                    "end": 34
                },
                {
                    "type": "bibr",
                    "ref_id": "b15",
                    "start": 118,
                    "text": "[16]",
                    "end": 122
                },
                {
                    "type": "bibr",
                    "ref_id": "b16",
                    "start": 122,
                    "text": "[17]",
                    "end": 126
                },
                {
                    "type": "bibr",
                    "ref_id": "b17",
                    "start": 126,
                    "text": "[18]",
                    "end": 130
                },
                {
                    "type": "bibr",
                    "ref_id": "b18",
                    "start": 130,
                    "text": "[19]",
                    "end": 134
                }
            ]
        },
        {
            "section": "Cross section normalisation",
            "text": "where \u03c3 tot (E \u03bd ) is the total inclusive cross section as a function of neutrino energy and the integral runs over the entire energy range the events were generated in 3 . R is provided in the default output of the NuWro and NEUT generators, but must be calculated for GENIE from the event record. A separate application, PrepareGENIE, is supplied to reconstruct the predicted GENIE cross section as a function of neutrino energy for each interaction channel. These cross-section \"splines\" are then used to predict R for the event sample given the input flux.",
            "paragraph_rank": 17,
            "section_rank": 6
        },
        {
            "section": "Cross section normalisation",
            "text": "A final flux-averaged cross-section weight, W , can then be calculated for each generator",
            "paragraph_rank": 18,
            "section_rank": 6
        },
        {
            "section": "Cross section normalisation",
            "text": "where N is the total number of events generated in the generator, and \u03a6 is the integrated neutrino flux between E min \u03bd and E max \u03bd (the neutrino energy limits in the signal definition)",
            "paragraph_rank": 19,
            "section_rank": 6
        },
        {
            "section": "Cross section normalisation",
            "text": "Filling a histogram in interaction variable x with the weights W , for events that pass a usersupplied signal definition produces a correctly normalised flux-averaged cross section d\u03c3(x).",
            "paragraph_rank": 20,
            "section_rank": 6
        },
        {
            "section": "Cross section normalisation",
            "text": "Dividing by each bin's width produces the differential cross section d\u03c3(x)/dx, shown in   Figure 3: Raw event rate and correctly normalised cross-section distributions as a function of muon kinetic energy, T \u00b5 , shown for \u03bd \u00b5 -CH 2 CC1\u03c0 \u00b1 events produced using a variety of generators and the MiniBooNE neutrino-mode flux (shown in Figure 2).",
            "paragraph_rank": 21,
            "section_rank": 6,
            "ref_spans": [
                {
                    "type": "figure",
                    "ref_id": "fig_1",
                    "start": 90,
                    "text": "Figure 3",
                    "end": 98
                },
                {
                    "type": "figure",
                    "start": 332,
                    "text": "Figure 2",
                    "end": 340
                }
            ]
        },
        {
            "text": "Comparisons to cross-section data",
            "section_rank": 7
        },
        {
            "section": "Comparisons to cross-section data",
            "text": "To compare different models to a chosen neutrino cross-section dataset a model prediction must be produced that matches the original data analysis, matching true signal and binning definitions. To add a new dataset to NUISANCE a new \"measurement\" class must be created which defines the analysis method used to turn a set of generated MC events into a matching model prediction. To minimise the work required for a user to add a new dataset, these classes inherit from a small number of \"measurement\" base classes which define methods common for all cross-section predictions of a certain type (e.g. one-dimensional, two-dimensional). Comparisons can be added into the framework provided the following information is known:",
            "paragraph_rank": 22,
            "section_rank": 7
        },
        {
            "section": "Comparisons to cross-section data",
            "text": "1. Data distribution: the measured central values and uncertainties must be supplied in either text or ROOT file format.",
            "paragraph_rank": 23,
            "section_rank": 7
        },
        {
            "section": "Comparisons to cross-section data",
            "text": "2. Signal definition: a signal which acts to select events using the particle list must be defined. Utility definitions are available for common signal definitions, e.g. CC0\u03c0.",
            "paragraph_rank": 24,
            "section_rank": 7
        },
        {
            "section": "Comparisons to cross-section data",
            "text": "3. Binning definition: the kinematic variables to plot must be defined from incoming/outgoing particle list, e.g. lepton momentum. The binning itself is copied from the data distribution.",
            "paragraph_rank": 25,
            "section_rank": 7
        },
        {
            "section": "Comparisons to cross-section data",
            "text": "4. (Optional) Covariance: the correlations between each point in the data distribution so that a more accurate likelihood can be formed. If no covariance is provided uncorrelated errors are assumed on each point.",
            "paragraph_rank": 26,
            "section_rank": 7
        },
        {
            "text": "(Optional)",
            "section_rank": 8
        },
        {
            "section": "(Optional)",
            "text": "Smearing matrix: a translation matrix to smear true variable distributions, converting them into detector reconstructed variable distributions that can be compared directly to reconstructed data releases.",
            "paragraph_rank": 27,
            "section_rank": 8
        },
        {
            "section": "(Optional)",
            "text": "Every sample has an event loop in the base class which iterates over all events given an input file provided at runtime. The input file to NUISANCE is the output of the generator(s) of interest 4 . Only events which pass the signal definition are retained past the first event loop. For signal events, a cross-section weight is calculated using Equation 2.2 (assuming a fluxaveraged cross section), and all histograms in the specific measurement class are filled. This automated event loop ensures that the core handling of event inputs remains the same for every measurement implementation class, although each method can be overloaded if necessary. An event manager can be turned on to avoid iterating over events in the same input file multiple times if two or more measurement classes use the same generator output file. When it is used, the event manager checks whether the signal criteria are met in any of the classes, and retains events which are signal for one or more of them. This can significantly speed up NUISANCE for many of the fitting routines, in which weights need to be recalculated and histograms refilled multiple times for a number of datasets, e.g. comparing multiple kinematic distributions of the same measurement, or different measurements using the same flux.",
            "paragraph_rank": 28,
            "section_rank": 8,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b3",
                    "start": 194,
                    "text": "4",
                    "end": 195
                }
            ]
        },
        {
            "section": "(Optional)",
            "text": "The most basic measurement implementation class produces a correctly normalised histogram with the same binning as the data and can be compared directly. ROOT histograms showing the data, MC prediction(s) and the input flux(es) are saved in the output file for later comparison. Various utility functions exist to include histograms, e.g. stacking the MC prediction by interaction mode or particle type, shape predictions and data-MC ratios, as in Figure 5. It is a trivial exercise to include any additional histograms by overloading the base-class functions.",
            "paragraph_rank": 29,
            "section_rank": 8,
            "ref_spans": [
                {
                    "type": "figure",
                    "ref_id": "fig_4",
                    "start": 448,
                    "text": "Figure 5",
                    "end": 456
                }
            ]
        },
        {
            "section": "(Optional)",
            "text": "The data-MC agreement is evaluated by a likelihood which is saved in the output file. The base class defaults to using a covariance matrix if supplied, or reverts to a Gaussian pdf for cross-section measurements and a Poisson pdf for event-rate measurements.",
            "paragraph_rank": 30,
            "section_rank": 8
        },
        {
            "section": "(Optional)",
            "text": "where \u03bd i is the bin content in i-th bin for data or MC, M is the supplied covariance matrix, and \u03c3 i is the error on the i-th bin in data. These likelihood functions can easily be overloaded by the user for each measurement class to allow more complex likelihoods to be used for a given analysis such as shape-only and floating normalisation likelihoods.",
            "paragraph_rank": 31,
            "section_rank": 8
        },
        {
            "text": "Event reweighting",
            "section_rank": 9
        },
        {
            "section": "Event reweighting",
            "text": "Event reweighting allows MC predictions to be modified after event generation by separating out parts of the cross section that can be recalculated without having to perform the entire MC simulation again. This saves considerable computation time and is useful for both model tuning and the evaluation of model systematic uncertainties since the events are already generated.",
            "paragraph_rank": 32,
            "section_rank": 9
        },
        {
            "section": "Event reweighting",
            "text": "NUISANCE has native support for the NEUT, NuWro [20], and GENIE event reweighting libraries. A NUISANCE reweight wrapper is provided which can read in the custom event format and return an event weight for any given parameter set. All reweightable parameters provided by the external libraries can be used to calculate new event weights. This allows the user to easily modify the NUISANCE prediction in the various fitting and validation routines, whilst requiring only minimal knowledge of the individual generators reweight engines. The reweighting parameters are specified in the user-supplied card files.",
            "paragraph_rank": 33,
            "section_rank": 9,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b19",
                    "start": 48,
                    "text": "[20]",
                    "end": 52
                }
            ]
        },
        {
            "text": "NUISANCE applications",
            "section_rank": 10
        },
        {
            "section": "NUISANCE applications",
            "text": "A number of different applications are available with the NUISANCE framework, all of which are controlled by card files. In this section, the main NUISANCE applications are introduced and a general overview of their functionality is given. Detailed information on the input format required and example card files are available at nuisance.hepforge.org. Additionally, the general behaviour of NUISANCE can be controlled by a configuration file, which can be overridden for specific comparisons if desired either in the card file or with command line arguments.",
            "paragraph_rank": 34,
            "section_rank": 10
        },
        {
            "text": "Simple data-MC comparisons: nuiscomp",
            "section_rank": 11
        },
        {
            "section": "Simple data-MC comparisons: nuiscomp",
            "text": "The simplest usage case for NUISANCE is to produce an MC prediction for one or multiple measurement(s). The nuiscomp application accepts a simple card file with a list of datasets to produce comparisons for and the input file to generate them with. It saves the resulting histograms to a single ROOT output file. Optionally, the user can specify any reweightable parameters which should be set when making this comparison. The default behaviour is to not reweight the prediction.",
            "paragraph_rank": 35,
            "section_rank": 11
        },
        {
            "section": "Simple data-MC comparisons: nuiscomp",
            "text": "As described in Section 2, different input types are automatically handled by NUISANCE. Changing generators only requires changing the input type and the file location, both specified by the user in the card file. Multiple generator, multiple dataset comparisons are straightforward with NUISANCE, as illustrated in Figure 4.",
            "paragraph_rank": 36,
            "section_rank": 11,
            "ref_spans": [
                {
                    "type": "figure",
                    "start": 316,
                    "text": "Figure 4",
                    "end": 324
                }
            ]
        },
        {
            "section": "Simple data-MC comparisons: nuiscomp",
            "text": "Alongside the data and MC histograms, the nuiscomp application saves a number of auxiliary MC histograms to help evaluate where there are tensions between the data and models. Examples include predictions separated by true interaction modes, and shape-only comparisons, shown in Figure 5.   Figure 4: Comparisons of different generators and their versions to published measurements [17,18]. The fluxes used to produce these distributions are shown in Figure 2.  ",
            "paragraph_rank": 37,
            "section_rank": 11,
            "ref_spans": [
                {
                    "type": "figure",
                    "ref_id": "fig_4",
                    "start": 279,
                    "text": "Figure 5",
                    "end": 287
                },
                {
                    "type": "figure",
                    "start": 291,
                    "text": "Figure 4",
                    "end": 299
                },
                {
                    "type": "bibr",
                    "ref_id": "b16",
                    "start": 382,
                    "text": "[17,",
                    "end": 386
                },
                {
                    "type": "bibr",
                    "ref_id": "b17",
                    "start": 386,
                    "text": "18]",
                    "end": 389
                },
                {
                    "type": "figure",
                    "start": 451,
                    "text": "Figure 2",
                    "end": 459
                }
            ]
        },
        {
            "text": "Raw generator comparisons: nuisflat",
            "section_rank": 12
        },
        {
            "section": "Raw generator comparisons: nuisflat",
            "text": "The nuisflat application is intended to compare generators to each other, rather than to data. A template class converts the generator events into a flat ROOT tree containing particle information for each event, what signal definitions the event passes, its interaction mode, amongst a host of other event variables. Additional quantities can be added to the tree for tailored studies including an option to save the entire NUISANCE event for access to the full input/output particle stack. Once the output has been produce by nuisflat it loses all dependencies on the generator libraries. Analysis is only dependent on ROOT to inspect the  tree and its contents; the application produces consistent generator comparisons with minimal knowledge of the individual generator.",
            "paragraph_rank": 38,
            "section_rank": 12
        },
        {
            "section": "Raw generator comparisons: nuisflat",
            "text": "As with all NUISANCE applications, nuisflat supports reweighting the generated events to parameter variations specified in the input card file by the user at runtime.",
            "paragraph_rank": 39,
            "section_rank": 12
        },
        {
            "text": "Systematic validation studies: nuissyst",
            "section_rank": 13
        },
        {
            "section": "Systematic validation studies: nuissyst",
            "text": "The nuissyst application can be used to study the effects of cross-section systematics on userspecified distributions in a number of ways, provided that the generators have reweighting libraries enabled 5 . It can step through a range of values for a reweightable parameter 6 and validate reweighting implementations. It can also compare each generator's implementation of the reweighting engines-e.g. the effect of varying M CCQE A by 0.1\u03c3 in GENIE versus the same variation in NuWro. Examples of the output of this utility can be found in Figure 6.",
            "paragraph_rank": 40,
            "section_rank": 13,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b4",
                    "start": 203,
                    "text": "5",
                    "end": 204
                },
                {
                    "type": "bibr",
                    "ref_id": "b5",
                    "start": 274,
                    "text": "6",
                    "end": 275
                },
                {
                    "type": "figure",
                    "ref_id": "fig_6",
                    "start": 541,
                    "text": "Figure 6",
                    "end": 549
                }
            ]
        },
        {
            "section": "Systematic validation studies: nuissyst",
            "text": "The nuissyst application can also make throws of any number of reweightable parameters to build up an error band on a generator prediction across any combination of datasets. The central value and 1\u03c3 uncertainty can be defined by the user, and Gaussian throws will be made around that value with the defined width. Flat parameter throws are also supported, and a method is included for throwing parameters according to a user-supplied parameter covariance matrix. In the latter case the distribution of parameter values for each bin of the requested distributions is used to produce a error band for that bin as shown in Figure 7.",
            "paragraph_rank": 41,
            "section_rank": 13,
            "ref_spans": [
                {
                    "type": "figure",
                    "start": 621,
                    "text": "Figure 7",
                    "end": 629
                }
            ]
        },
        {
            "section": "Systematic validation studies: nuissyst",
            "text": "A realistic use case for nuissyst is shown in Figure 8, where 500 throws of the default GENIE v2.12.0 cross-section uncertainties have been used to build up a 1\u03c3 error band for the ArgoNeuT\u03bd-40 Ar CC-inclusive dataset [19]. This functionality enables the user to investigate  Figure 7: Examples of thrown parameter values and the likelihood results for 500 different toy datasets generated with GENIE v2.12.0 for comparison to the ArgoNeut\u03bd-40 Ar CC-inclusive dataset [19].  Figure 8: Default GENIE v2.12.0 prediction for the ArgoNeut\u03bd \u00b5 -40 Ar CC-inclusive distributions [19], with error bands produced with 500 throws of all GENIE reweighting parameters according to their nominal uncertainties.",
            "paragraph_rank": 42,
            "section_rank": 13,
            "ref_spans": [
                {
                    "type": "figure",
                    "start": 46,
                    "text": "Figure 8",
                    "end": 54
                },
                {
                    "type": "bibr",
                    "ref_id": "b18",
                    "start": 218,
                    "text": "[19]",
                    "end": 222
                },
                {
                    "type": "figure",
                    "start": 276,
                    "text": "Figure 7",
                    "end": 284
                },
                {
                    "type": "bibr",
                    "ref_id": "b18",
                    "start": 468,
                    "text": "[19]",
                    "end": 472
                },
                {
                    "type": "figure",
                    "start": 475,
                    "text": "Figure 8",
                    "end": 483
                },
                {
                    "type": "bibr",
                    "ref_id": "b18",
                    "start": 572,
                    "text": "[19]",
                    "end": 576
                }
            ]
        },
        {
            "section": "Systematic validation studies: nuissyst",
            "text": "whether a supplied generator cross-section uncertainty agrees with any particular dataset and aids in robust parameter error inflation studies. A histogram is saved in the output file which shows the level of data-MC agreement for all datasets included in the comparison. In such a case, a \u03c7 2 statistic is calculated as shown in Figure 7.  Figure 9: Fit of the nominal NEUT v5.3.6 CCQE model to ANL CCQE E \u03bd and N evt (Q 2 ) distributions [16] where the only free parameter in the axial mass M A . The \u03c7 2 contributions from each distribution to their joint likelihood is shown as a function of M A , and the best fit error is indicated. The best fit and nominal distributions are compared to the E \u03bd distribution.",
            "paragraph_rank": 43,
            "section_rank": 13,
            "ref_spans": [
                {
                    "type": "figure",
                    "start": 330,
                    "text": "Figure 7",
                    "end": 338
                },
                {
                    "type": "figure",
                    "start": 341,
                    "text": "Figure 9",
                    "end": 349
                },
                {
                    "type": "bibr",
                    "ref_id": "b15",
                    "start": 440,
                    "text": "[16]",
                    "end": 444
                }
            ]
        },
        {
            "text": "Parameter fitting: nuismin",
            "section_rank": 14
        },
        {
            "section": "Parameter fitting: nuismin",
            "text": "NUISANCE was originally designed to compare and tune the NEUT generator predictions to external datasets to provide cross-section uncertainties for T2K analyses. The nuismin application fits any number of reweightable parameters to any combination of measurements, and uses ROOT minimisation libraries to minimise the test-statistic with respect to the parameters specified. ROOT provides multiple linear and non-linear scan methods which can be chosen at runtime. By default, the MIGRAD steepest gradient descent algorithm from the MINUIT package is used [22]. It is also possible to modify the test-statistic for each dataset used in the minimisation by overloading the base class function. The fit parameters are specified in the card file, and it is possible to fix parameters, set fit boundaries and define starting values.",
            "paragraph_rank": 44,
            "section_rank": 14,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b21",
                    "start": 556,
                    "text": "[22]",
                    "end": 560
                }
            ]
        },
        {
            "section": "Parameter fitting: nuismin",
            "text": "At each iteration of the fit, NUISANCE recalculates weights on an event-by-event basis using the relevant generator's reweighting libraries with the parameter variations requested by the minimisation algorithm. Weighted histograms are filled for all specified samples and the new test-statistic for the reweighted prediction is calculated and used to inform the minimisation algorithm. The output includes the nominal and best fit histograms, information about the best fit parameters and correlations between them, and basic information about the fit, such as the best fit \u03c7 2 and the number of iterations. Parameter error estimation is determined by the minimiser in ROOT. An example of a simple fit procedure is shown in Figure 9, where the NEUT CCQE model is fit simultaneously to ANL CCQE \u03c3(E \u03bd ) and N evt (Q 2 ) data [16]. The joint likelihood is the sum of the likelihoods provided by each of the samples, which are treated independently by NUISANCE. The nominal and best fit distributions are also shown, and the error on the fitted parameter is indicated.  Penalty terms on parameters can also be introduced in nuismin. The penalties can be applied with a correlation by supplying a covariance matrix. The output parameter covariance matrix of a previous nuismin fit is also supported as a penalty term in a subsequent fit. For example, Figure 10 shows a fit to MINERvA \u03bd \u00b5 -CH CCQE data [23] where the only free parameter is the axial mass, M A . In this fit, the result of the free-nucleon fit to ANL data shown in Figure 9 has been used as a prior constraint on M A which contributes a penalty to the fit. The contribution from the \u03c7 2 from the MINERvA data and the ANL prior is indicated, and it is clear that the MINERvA data favours a higher M A , contesting the ANL prior. It is also possible to use the output of the nuismin fit as an input to most other NUISANCE applications. For example, after running a fit to MiniBooNE CC1\u03c0 + data, it might be desirable to produce error bands showing the effect of the uncertainty on T2K CC1\u03c0 + data, for which the nuissyst application can be used.",
            "paragraph_rank": 45,
            "section_rank": 14,
            "ref_spans": [
                {
                    "type": "figure",
                    "start": 724,
                    "text": "Figure 9",
                    "end": 732
                },
                {
                    "type": "bibr",
                    "ref_id": "b15",
                    "start": 824,
                    "text": "[16]",
                    "end": 828
                },
                {
                    "type": "figure",
                    "ref_id": "fig_0",
                    "start": 1347,
                    "text": "Figure 10",
                    "end": 1356
                },
                {
                    "type": "bibr",
                    "ref_id": "b22",
                    "start": 1398,
                    "text": "[23]",
                    "end": 1402
                },
                {
                    "type": "figure",
                    "start": 1527,
                    "text": "Figure 9",
                    "end": 1535
                }
            ]
        },
        {
            "text": "Summary",
            "section_rank": 15
        },
        {
            "section": "Summary",
            "text": "NUISANCE is a flexible tool for comparing all commonly used neutrino event generators with published cross-section data. It provides a common ground for comparing generators as well as testing and tuning model parameters. It has already proven an invaluable tool for T2K studies of cross-section parameters [7], and has been made open access in the hope that it will prove useful to the wider community. A number of different possible usage cases have been identified for NUISANCE:",
            "paragraph_rank": 46,
            "section_rank": 15,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b6",
                    "start": 307,
                    "text": "[7]",
                    "end": 310
                }
            ]
        },
        {
            "section": "Summary",
            "text": "\u2022 users who wish to make a comprehensive range of well-validated generator comparisons to new cross-section datasets without having to be familiar with all of the generators;",
            "paragraph_rank": 47,
            "section_rank": 15
        },
        {
            "section": "Summary",
            "text": "\u2022 users who wish to validate their cross-section parametrisation and error budget with a variety of historical cross-section data, or test new parameters against them;",
            "paragraph_rank": 48,
            "section_rank": 15
        },
        {
            "section": "Summary",
            "text": "\u2022 users who wish to tune and select default cross-section models for a given generator to a wide variety of cross-section data for cross-section and oscillation experiments;",
            "paragraph_rank": 49,
            "section_rank": 15
        },
        {
            "section": "Summary",
            "text": "\u2022 users who are interested in evaluating systematic uncertainties for systematics by comparing predictions of multiple generators.",
            "paragraph_rank": 50,
            "section_rank": 15
        },
        {
            "section": "Summary",
            "text": "This paper provides a number of examples to demonstrate the types of analyses which are straight-forward to perform with NUISANCE. Further documentation, usage examples and guidance can be found at nuisance.hepforge.org. We welcome code contributions, collaboration and new members.",
            "paragraph_rank": 51,
            "section_rank": 15
        },
        {
            "text": "Figure 1",
            "section_rank": 16
        },
        {
            "section": "Figure 1",
            "text": "illustrates a simple comparison of CC-inclusive \u03bd \u00b5 -CH 2 events generated with a variety of generators using the MiniBooNE neutrino-mode flux shown inFigure 2[15].",
            "paragraph_rank": 52,
            "section_rank": 16,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b14",
                    "start": 159,
                    "text": "[15]",
                    "end": 163
                }
            ]
        },
        {
            "text": "Fig- ure 3 .",
            "section_rank": 17
        },
        {
            "section": "Fig- ure 3 .",
            "text": "This is only appropriate when comparing to flux-averaged cross-section results. For a flux-integrated cross section the flux is instead integrated out on a bin-by-bin basis and the E min \u03bd",
            "paragraph_rank": 53,
            "section_rank": 17
        },
        {
            "text": "MC broken down by true interaction mode",
            "paragraph_rank": 54,
            "section_rank": 18
        },
        {
            "text": "Figure 5 :",
            "section_rank": 19
        },
        {
            "section": "Figure 5 :",
            "text": "Figure 5: NEUT prediction for MINERvA CCN \u03c0 +[21] produced with the nuiscomp application. The fluxes used to produce these distributions are shown inFigure 2.",
            "paragraph_rank": 55,
            "section_rank": 19,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b20",
                    "start": 45,
                    "text": "[21]",
                    "end": 49
                }
            ]
        },
        {
            "text": "Figure 6 :",
            "section_rank": 20
        },
        {
            "section": "Figure 6 :",
            "text": "Figure 6: Reweighting responses for a set of NuWro events compared to MiniBooNE CCQE neutrino data.",
            "paragraph_rank": 56,
            "section_rank": 20
        },
        {
            "text": "Muon angle w.r.t incoming beam direction (\u03b8 \u00b5 )",
            "paragraph_rank": 57,
            "section_rank": 21
        },
        {
            "text": "\u03c7 2 scan across the M A parameter space Nominal and best fit E \u03bd distribution",
            "paragraph_rank": 58,
            "section_rank": 22
        },
        {
            "text": "\u03c7 2 scan across the M A parameter space Nominal and best fit MINERvA distribution",
            "paragraph_rank": 59,
            "section_rank": 23
        },
        {
            "text": "Figure 10 :",
            "section_rank": 24
        },
        {
            "section": "Figure 10 :",
            "text": "Figure 10: Fit of NEUT v5.3.6 to MINERvA \u03bd \u00b5 -CH CCQE data[23] with a prior constraint set by a fit to ANL CCQE data, shown inFigure 9.",
            "paragraph_rank": 60,
            "section_rank": 24,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b22",
                    "start": 58,
                    "text": "[23]",
                    "end": 62
                }
            ]
        },
        {
            "text": ", E max \u03bd limits in 2.3 are instead given by the bin-edges of the relevant E \u03bd bin that an event resides in.",
            "paragraph_rank": 61,
            "section_rank": 25
        },
        {
            "text": "Only shape comparisons are possible with NUANCE because of limitations in the generator output.2 The definition of these channels may vary between generators. Since most measurements are topology based, this is not a problem.",
            "paragraph_rank": 62,
            "section_rank": 25,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b1",
                    "start": 95,
                    "text": "2",
                    "end": 96
                }
            ]
        },
        {
            "text": "Even if the signal definition contains a cut on E\u03bd",
            "paragraph_rank": 63,
            "section_rank": 25
        },
        {
            "text": "Which has to be pre-processed when using GENIE with the PrepareGENIE utility.",
            "paragraph_rank": 64,
            "section_rank": 25
        },
        {
            "text": "Possible in GENIE, NEUT and NuWro6 If a parameter is reweightable by a generator's reweighting library it is supported in NUISANCE.",
            "paragraph_rank": 65,
            "section_rank": 25,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b5",
                    "start": 33,
                    "text": "6",
                    "end": 34
                }
            ]
        },
        {
            "text": "Acknowledgments",
            "section_rank": 27
        },
        {
            "section": "Acknowledgments",
            "text": "The authors would like to thank the members of the T2K collaboration for the help and support when developing NUISANCE. We would also like to thank the authors of the NEUT, NuWro, GiBUU, and GENIE generators for being responsive to questions regarding the interface to their software. L. Pickering would like to extend special thanks to U. Mosel for his help validating the NUISANCE GiBUU integration. We thank the MINERvA, MiniBooNE and T2K collaborations for assistance in understanding their results and helping us to validate the output from NUISANCE. We would like to thank HepForge for hosting the NUISANCE framework. We acknowledge the support of MEXT, Japan; National Science Centre (NCN), Poland; MINECO and ERDF funds, Spain; SNSF and SER, Switzerland; STFC, UK; and DOE, USA. KM would like to acknowledge the support of the DOE under award number 145568 and the Alfred P. Sloan Foundation.",
            "paragraph_rank": 66,
            "section_rank": 27
        }
    ]
}
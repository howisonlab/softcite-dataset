{
    "level": "paragraph",
    "abstract": [
        {
            "text": "We have entered the Noisy Intermediate-Scale Quantum Era. A plethora of quantum processor prototypes allow evaluation of potential of the Quantum Computing paradigm in applications to pressing computational problems of the future. Growing data input rates and detector resolution foreseen in High-Energy LHC (2030s) experiments expose the often high time and/or space complexity of classical algorithms. Quantum algorithms can potentially become the lower-complexity alternatives in such cases. In this work we discuss the potential of Quantum Associative Memory (QuAM) in the context of LHC data triggering. We examine the practical limits of storage capacity, as well as store and recall errorless efficiency, from the viewpoints of the state-of-the-art IBM quantum processors and LHC real-time charged track pattern recognition requirements. We present a software prototype implementation of the QuAM protocols and analyze the topological limitations for porting the simplest QuAM instances to the public IBM 5Q and 14Q cloud-based superconducting chips.",
            "paragraph_rank": 1,
            "section_rank": 1
        }
    ],
    "body_text": [
        {
            "text": "Introduction",
            "section_rank": 2
        },
        {
            "section": "Introduction",
            "text": "High Energy Physics (HEP) is a prime example of data intensive science. Over the next decade rapid evolution of accelerator technologies and particle detectors will increase by one order of magnitude the amount and the complexity of data coming from facilities such as Large Hadron Collider (LHC), creating new challenges for the online event selection (Trigger) systems in HEP experiments. To cope with increasing data input rates, sophisticated event selection techniques are being employed at both hardware and software levels. However, current approaches in particular to charged particle pattern recognition, scale poorly with data complexity. Under reasonable technology and cost evolution models, the physics output of the next generation of HEP experiments will be limited by their pattern recognition strategy.",
            "paragraph_rank": 2,
            "section_rank": 2
        },
        {
            "section": "Introduction",
            "text": "The data input rates foreseen in High-Luminosity LHC (HL-LHC) and beyond impose new challenging requirements on the charged trigger systems. Data rates in HEP experiments (at the LHC and elsewhere) will continue to increase. As the corresponding algorithmic complexity of many crucial HEP data processing problems is often polynomial or worse, it is of a substantial interest to investigate alternative, non-classical approaches and algorithms capable of more efficient and scalable track recognition. To cope with the new challenges, LHC experiments have launched a series of trigger upgrade projects. For example the ATLAS experiment at CERN LHC introduced a new system of electronics, Fast Tracker (FTK) [1]. The system is aimed at real time track reconstruction at a 100 kHz Level-1 trigger rate. To meet the time budget requirements, FTK employed Associative Memory (AM) [2,3]. The latter allowed to address the problem of track pattern recognition -the most computationally hard part of track finding -in a massively parallel way. The approach is based on nearly simultaneous and constant-time comparison of coarse-grained hits being readout from the tracker stations to those of the MC generated track patterns pre-loaded into AM. In Run 2 and Run 3, the AM pattern bank will have to store \u223c 10 9 track patterns of 8-integer length. The bank pattern of this size requires 8 \u2022 10 3 AM chips (AMchip06), \u223c 32kW of supporting power and associated cooling. It is foreseen that 8-16 times more patterns will be required in HL-LHC (2026). There are two evolutionary, linear solutions to this problem, 1) scale-up the number of AM chips of current generation, considered as cost and power inefficient; 2) more plausibly, upgrade the AMchip06 design to increase its storage capacity.",
            "paragraph_rank": 3,
            "section_rank": 2,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b0",
                    "start": 707,
                    "text": "[1]",
                    "end": 710
                },
                {
                    "type": "bibr",
                    "ref_id": "b1",
                    "start": 876,
                    "text": "[2,",
                    "end": 879
                },
                {
                    "type": "bibr",
                    "ref_id": "b2",
                    "start": 879,
                    "text": "3]",
                    "end": 881
                }
            ]
        },
        {
            "section": "Introduction",
            "text": "In this paper, we consider Quantum Associative Memory (QuAM) [4][5][6][7][8] -a quantum variant of AM based on quantum storage medium and two quantum algorithms for information storage and recall. We compare theoretical QuAM errorless performance expectations to the requirements of the current ATLAS track pattern recognition problem. We also present a software prototype for QuAM circuit generators and point out the limitations for porting QuAM to the state-of-the-art IBM quantum processor units (QPUs).",
            "paragraph_rank": 4,
            "section_rank": 2,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b3",
                    "start": 61,
                    "text": "[4]",
                    "end": 64
                },
                {
                    "type": "bibr",
                    "ref_id": "b4",
                    "start": 64,
                    "text": "[5]",
                    "end": 67
                },
                {
                    "type": "bibr",
                    "ref_id": "b5",
                    "start": 67,
                    "text": "[6]",
                    "end": 70
                },
                {
                    "type": "bibr",
                    "ref_id": "b6",
                    "start": 70,
                    "text": "[7]",
                    "end": 73
                },
                {
                    "type": "bibr",
                    "ref_id": "b7",
                    "start": 73,
                    "text": "[8]",
                    "end": 76
                }
            ]
        },
        {
            "text": "Quantum storage 2.1 Assembling quantum memory",
            "section_rank": 3
        },
        {
            "section": "Quantum storage 2.1 Assembling quantum memory",
            "text": "Let \u03be \u2286 {0, 1} n represents a set of N reference binary patterns of length n. QuAM is based on establishing an injection \u03be |\u03be , where |\u03be denotes an orthonormal basis of the Hilbert space of a quantum mechanical system composed of n 2-level qubits. Memorizing \u03be can then be done by assembling a quantum superposition:",
            "paragraph_rank": 5,
            "section_rank": 3
        },
        {
            "section": "Quantum storage 2.1 Assembling quantum memory",
            "text": "Note that the special case of \u03be = {0, 1} n and N = 2 n is trivial and describes complete quantum memory. The only practical value of this case and, more generally, of the case of N approaching 2 n , is in their setup simplicity, which can be useful for the purposes of verification and benchmarking on the Noisy Intermediate-Scale Quantum Era (NISQ) era QPUs.",
            "paragraph_rank": 6,
            "section_rank": 3
        },
        {
            "section": "Quantum storage 2.1 Assembling quantum memory",
            "text": "Ventura and Martinez [4][5][6], and Trugenberger [8], proposed two alternative ways for unitary assembling of the equal-weighted partial superposition. Simple analysis revealed that the quantum storage algorithm outlined by Trugenberger features shallower circuit and lower topological complexity (see Section 4 for more details), though at the cost of one extra qubit required for auxiliary operations. From the standpoint of limitations of the state-of-the-art QPUs, these properties make this algorithm preferable for implementation. The Trugenberger's quantum algorithm for storing requires three memory registers spanning 2(n + 1) qubits to operate [8]: n qubits -for temporary pattern storage, n -for permanent pattern storage and 2 qubits for storage and recall operations control. Figure 1 outlines the core iteration for storing a 2-bit pattern in this approach.",
            "paragraph_rank": 7,
            "section_rank": 3,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b3",
                    "start": 21,
                    "text": "[4]",
                    "end": 24
                },
                {
                    "type": "bibr",
                    "ref_id": "b4",
                    "start": 24,
                    "text": "[5]",
                    "end": 27
                },
                {
                    "type": "bibr",
                    "ref_id": "b5",
                    "start": 27,
                    "text": "[6]",
                    "end": 30
                },
                {
                    "type": "bibr",
                    "ref_id": "b7",
                    "start": 49,
                    "text": "[8]",
                    "end": 52
                },
                {
                    "type": "bibr",
                    "ref_id": "b7",
                    "start": 654,
                    "text": "[8]",
                    "end": 657
                },
                {
                    "type": "figure",
                    "ref_id": "fig_0",
                    "start": 789,
                    "text": "Figure 1",
                    "end": 797
                }
            ]
        },
        {
            "section": "Quantum storage 2.1 Assembling quantum memory",
            "text": "A complete quantum circuit for encoding a pattern set must have the iterations interleaved with additional quantum gates for read-in of classical bits into the temporary register. An example of such a complete circuit, along with key implementation details, will be shown in Section 5. Qubits p are used as temporary storage register, qubits u -as control register and m -as memory register. The controlled gate, acting on the u-register and parameterized with a pattern index i \u2208 {1, . . . , N}, spawns a new term in the quantum memory superposition for the pattern being stored.",
            "paragraph_rank": 8,
            "section_rank": 3
        },
        {
            "text": "Exponential quantum capacity",
            "section_rank": 4
        },
        {
            "section": "Exponential quantum capacity",
            "text": "The cardinality of an orthonormal basis of the Hilbert space admits, in computational complexity sense, optimal pattern storage capacity for patterns of bit-length equal to the number of qubits in the system. Equivalently, a quantum storage medium provides exponential scaling of its pattern capacity as a function of pattern length. Fair comparison of quantum and classical memory capacities requires accounting for auxiliary qubits that are necessary for quantum operations. However, the asymptotic effect of this additional requirement in storage algorithms of [4][5][6] and [8] is bound by a constant (in Section 4 we elaborate on other practical consequences of this). Figure 2 compares capacity scaling of classical and quantum associative memories, with the latter being considered in the Trugenberger's approach. In the case of the ATLAS fast track pattern recognition, the binary pattern length is defined as a sum over the Inner Tracker logical layers of interest w i , where w is length of binary representation of a hit identifier within each layer. In LHC Run 2 and Run 3, 8 logical layers are involved in the AM-based pattern recognition. Table 1 summarizes available QuAM capacity for various granularity of the track hit resolution. Qutrits (quantum trits) may help reduce the minimum requirement for the number of physical quantum units necessary for a particular pattern length. But existent hardware implementations are less developed due to more challenging qutrit control. The use of random access encodings [9] could further reduce the requirement, though involving a tradeoff on query efficiency. We left both ideas out of the scope of this study. It is important to note, however, that any quantum information compression technique is limited by the Holevo's bound [10] upon accessing the information.",
            "paragraph_rank": 9,
            "section_rank": 4,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b3",
                    "start": 564,
                    "text": "[4]",
                    "end": 567
                },
                {
                    "type": "bibr",
                    "ref_id": "b4",
                    "start": 567,
                    "text": "[5]",
                    "end": 570
                },
                {
                    "type": "bibr",
                    "ref_id": "b5",
                    "start": 570,
                    "text": "[6]",
                    "end": 573
                },
                {
                    "type": "bibr",
                    "ref_id": "b7",
                    "start": 578,
                    "text": "[8]",
                    "end": 581
                },
                {
                    "type": "figure",
                    "ref_id": "fig_1",
                    "start": 674,
                    "text": "Figure 2",
                    "end": 682
                },
                {
                    "type": "table",
                    "ref_id": "tab_0",
                    "start": 1153,
                    "text": "Table 1",
                    "end": 1160
                },
                {
                    "type": "bibr",
                    "ref_id": "b8",
                    "start": 1529,
                    "text": "[9]",
                    "end": 1532
                },
                {
                    "type": "bibr",
                    "ref_id": "b9",
                    "start": 1789,
                    "text": "[10]",
                    "end": 1793
                }
            ]
        },
        {
            "text": "Quantum recall",
            "section_rank": 5
        },
        {
            "section": "Quantum recall",
            "text": "Leveraging the quantum advantage of exponential memory capacity requires scalable and efficient algorithms for memory querying. Two quantum algorithms are discussed in the literature. The first, used by the original proponents of QuAM -Ventura and Martinez [4][5][6], is a generalization of the classic Grover's algorithm [11][12][13]. The algorithm offers quadratic speedup in searching an element in an unordered dataset as compared to the best known classical counterparts, and is proven to be optimal in computational complexity sense [14]. The second memory querying algorithm [8], relies on the technique of post-selection of the measurement result, and allows to avoid the measurement-induced collapse of memory upon a query. The latter comes at the cost of getting only a binary response. Without a measurement of all pattern bits, a binary response does not provide important features of associative memory such as recall of incomplete and noisy patterns. In addition, the post-selection technique offers no quantum speedup. At the same time, as the algorithm speed is of uttermost importance when working with extremely large memories, we consider the asymptotic speedupthe cornerstone of quantum computing -the guiding feature that makes the Grover's algorithm our primary choice for this study.",
            "paragraph_rank": 10,
            "section_rank": 5,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b3",
                    "start": 257,
                    "text": "[4]",
                    "end": 260
                },
                {
                    "type": "bibr",
                    "ref_id": "b4",
                    "start": 260,
                    "text": "[5]",
                    "end": 263
                },
                {
                    "type": "bibr",
                    "ref_id": "b5",
                    "start": 263,
                    "text": "[6]",
                    "end": 266
                },
                {
                    "type": "bibr",
                    "ref_id": "b10",
                    "start": 322,
                    "text": "[11]",
                    "end": 326
                },
                {
                    "type": "bibr",
                    "ref_id": "b11",
                    "start": 326,
                    "text": "[12]",
                    "end": 330
                },
                {
                    "type": "bibr",
                    "ref_id": "b12",
                    "start": 330,
                    "text": "[13]",
                    "end": 334
                },
                {
                    "type": "bibr",
                    "ref_id": "b13",
                    "start": 539,
                    "text": "[14]",
                    "end": 543
                },
                {
                    "type": "bibr",
                    "ref_id": "b7",
                    "start": 582,
                    "text": "[8]",
                    "end": 585
                }
            ]
        },
        {
            "section": "Quantum recall",
            "text": "Application of the Grover's algorithm in the QuAM context requires the use of its generalized variant for handling arbitrary amplitude distributions in the initial memory state [15,16]. The circuit for such algorithm is outlined in Figure 3. In what follows, we revisit some of the theoretical aspects of the algorithm to estimate its theoretical efficiency in the context of ATLAS FTK pattern recognition requirements.",
            "paragraph_rank": 11,
            "section_rank": 5,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b14",
                    "start": 177,
                    "text": "[15,",
                    "end": 181
                },
                {
                    "type": "bibr",
                    "ref_id": "b15",
                    "start": 181,
                    "text": "16]",
                    "end": 184
                },
                {
                    "type": "figure",
                    "ref_id": "fig_2",
                    "start": 232,
                    "text": "Figure 3",
                    "end": 240
                }
            ]
        },
        {
            "section": "Quantum recall",
            "text": "Let, for a given query, the quantum superposition is split as",
            "paragraph_rank": 12,
            "section_rank": 5
        },
        {
            "section": "Quantum recall",
            "text": "with k i (t), l i (t) denoting the amplitudes of matching and non-matching the pattern of interest, m -the number of matched states, and N -the total number of patterns stored in memory. An exact solution to difference equations describing the evolution of amplitudes with arbitrary initial conditions is known [15,16]. Thus, assuming without loss of generality that 1 m N 2 , the amplitudes of the matching states evolve as EPJ Web of Conferences 214, 01012 (2019) https://doi.org/10.1051/epjconf/201921401012 CHEP 2018",
            "paragraph_rank": 13,
            "section_rank": 5,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b14",
                    "start": 311,
                    "text": "[15,",
                    "end": 315
                },
                {
                    "type": "bibr",
                    "ref_id": "b15",
                    "start": 315,
                    "text": "16]",
                    "end": 318
                }
            ]
        },
        {
            "section": "Quantum recall",
            "text": "wherek,l are average amplitudes of matching and non-matching states, and cos w = 1 \u2212 2m N .",
            "paragraph_rank": 14,
            "section_rank": 5
        },
        {
            "section": "Quantum recall",
            "text": "Thus, the probability",
            "paragraph_rank": 15,
            "section_rank": 5
        },
        {
            "section": "Quantum recall",
            "text": "|k i (t)| 2 to measure a marked state (i.e., a solution) peaks at",
            "paragraph_rank": 16,
            "section_rank": 5
        },
        {
            "section": "Quantum recall",
            "text": "Grover's iterations, with the nearest integer function NI defined using the rounding down rule for half-integers. The upper bound P max \u2265 P(t) for probability of measuring a solution is",
            "paragraph_rank": 17,
            "section_rank": 5
        },
        {
            "section": "Quantum recall",
            "text": "where \u03c3 2 l is variance of non-matching amplitudes, which is a constant of motion [15,16]. The upper bound (2) can only be reached for integer arguments of the NI function in (1) and equals 1 only in the special case of uniform initial distribution, which can never occur in practical applications of QuAM. However, for m N, the theoretical upper bound for measuring a matching state approaches certainty.",
            "paragraph_rank": 18,
            "section_rank": 5,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b14",
                    "start": 82,
                    "text": "[15,",
                    "end": 86
                },
                {
                    "type": "bibr",
                    "ref_id": "b15",
                    "start": 86,
                    "text": "16]",
                    "end": 89
                },
                {
                    "type": "bibr",
                    "ref_id": "b0",
                    "start": 175,
                    "text": "(1)",
                    "end": 178
                }
            ]
        },
        {
            "section": "Quantum recall",
            "text": "As a demonstration, let us consider some of the pertinent properties of the classic Grover's search in the context of the FTK requirements. The evolution of probability as the Grover's algorithm prepares a quantum system for a measurement is visualized in Figure 4 (left) for the case of uniform initial superposition of 10 9 basis states. For example, a query matching one pattern requires 24836 Grover's iterations to reach the peak measurement probability of 0.999999999996. Note that the probability ramp-up is slowing down when approaching the peak. This gives an option of cutting the number of iterations down to acceptable value of the outcome probability. Another observation is that, for a given capacity, the number of iterations necessary to reach the peak probability decreases monotonically as the number of solutions increases. For example, a query matching 20 patterns requires 5553 iterations to peak at 0.9999999991 probability of measuring one of the solutions. This suggests, where applicable, another dimension for minimization of the number of Grover iterations based on wildcarded pattern matching. Note that the latter optimization, as seen in Figure 4 (right), affects the maximum achievable probability. Significance of this effect, however, is limited to the region of extremely high number of solutions.",
            "paragraph_rank": 19,
            "section_rank": 5,
            "ref_spans": [
                {
                    "type": "figure",
                    "ref_id": "fig_3",
                    "start": 256,
                    "text": "Figure 4",
                    "end": 264
                },
                {
                    "type": "figure",
                    "ref_id": "fig_3",
                    "start": 1168,
                    "text": "Figure 4 (right)",
                    "end": 1184
                }
            ]
        },
        {
            "text": "Topological constraints",
            "section_rank": 6
        },
        {
            "section": "Topological constraints",
            "text": "Limited connectivity between qubits on most state-of-the-art QPUs often constitutes the main impediment to the mapping of complex quantum algorithms onto them. This can manifest, for example, in non-efficient transpilation of 2-qubit gates leading to higher error accumulation, or in a complete topological mismatch between algorithmic and processor connectivity graphs making the mapping impossible. Connectivity problems can be addressed on the hardware side -with the advancement of the principles of operation and architectures of QPUs toward higher connectivity. They can also be mitigated by optimizing algorithms for lower connectivity requirements. Scalability of such hardware and algorithmic solutions is of uttermost importance, as quantum computing advantages are asymptotic.",
            "paragraph_rank": 20,
            "section_rank": 6
        },
        {
            "section": "Topological constraints",
            "text": "In this light, it is interesting to analyze the topological complexity of the algorithms used in QuAM. It turns out that the storage algorithm suggested by Trugenberger [8] features weaker topological requirements as compared to the original one proposed by Ventura nad Martinez [4]. The topological requirements for Trugenberger's storage are a superset of the ones for Grover's recall. Thus, we can summarize the integral topological requirements in Figure 5, where we outlined the special cases of 2-and 3-bit patterns, as well as the general case of n-bit patterns. Importantly, the topological complexity of the algorithms does not depend on the number of patterns being stored, but rather on the length of a pattern.  The public IBM Q Experience QPUs we have looked at in this study include, at the time the paper is written, the 5-qubit IBM Q 5 Yorktown/Tenerife and the 14-qubit IBM Q 14 Melbourne [17] devices. By the number of qubits, only the latter could allow to run the simplest QuAM circuits (patterns of up to 5-bit length). Unfortunately, it does not satisfy the topological requirements even for the most trivial case of a 2-bit pattern. In contrast, the latter EPJ Web of Conferences 214, 01012 (2019) https://doi.org/10.1051/epjconf/201921401012 CHEP 2018 case should be topologically compliant with the 20-qubit IBM Q 20 Tokyo available for IBM Q Network clients and will be tested in the near future.",
            "paragraph_rank": 21,
            "section_rank": 6,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b7",
                    "start": 169,
                    "text": "[8]",
                    "end": 172
                },
                {
                    "type": "bibr",
                    "ref_id": "b3",
                    "start": 279,
                    "text": "[4]",
                    "end": 282
                },
                {
                    "type": "figure",
                    "ref_id": "fig_5",
                    "start": 452,
                    "text": "Figure 5",
                    "end": 460
                },
                {
                    "type": "bibr",
                    "ref_id": "b16",
                    "start": 906,
                    "text": "[17]",
                    "end": 910
                }
            ]
        },
        {
            "text": "Implementation on IBM Q Experience",
            "section_rank": 7
        },
        {
            "section": "Implementation on IBM Q Experience",
            "text": "We have implemented a software prototype that includes the QuAM storage and recall circuit generators. The prototype is based on the Trugenberger's algorithm for storage and the generalized Grover's algorithm for recall outlined in previous sections and is developed in the QISKit framework [18] of the IBM Q Experience Project [19].",
            "paragraph_rank": 22,
            "section_rank": 7,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b17",
                    "start": 291,
                    "text": "[18]",
                    "end": 295
                },
                {
                    "type": "bibr",
                    "ref_id": "b18",
                    "start": 328,
                    "text": "[19]",
                    "end": 332
                }
            ]
        },
        {
            "section": "Implementation on IBM Q Experience",
            "text": "It turns out that most gates employed by both algorithms are either directly implemented, or, like the Toffoli gate, have known exact decompositions over the elementary gate set implemented on IBM Qs. The only minor exception to this is the gate that spawns a superposing term for each new pattern (see the core gate of the storage circuit in Figure 1). The corollary of the Z-Y theorem for decomposition of a controlled-U operation as U = e i\u03b1 (AB) \u22121 \u03c3 x B\u03c3 x A [20] with a choice of A = U 3 (\u03c0, \u03b8, 0) and B = H, as well as a substitution of the pattern index i = sin \u22122 \u03b8 2 , make its decomposition straightforward. Figure 6 shows an example of the end-to-end 2-bit quantum circuits produced by our prototype. ",
            "paragraph_rank": 23,
            "section_rank": 7,
            "ref_spans": [
                {
                    "type": "figure",
                    "ref_id": "fig_0",
                    "start": 343,
                    "text": "Figure 1)",
                    "end": 352
                },
                {
                    "type": "bibr",
                    "ref_id": "b19",
                    "start": 464,
                    "text": "[20]",
                    "end": 468
                },
                {
                    "type": "figure",
                    "ref_id": "fig_6",
                    "start": 619,
                    "text": "Figure 6",
                    "end": 627
                }
            ]
        },
        {
            "text": "Conclusion",
            "section_rank": 8
        },
        {
            "section": "Conclusion",
            "text": "Leveraging the power of the quantum computing paradigm in HEP, and elsewhere, is in its infancy. The objective of this study was to initiate a discussion within the HEP community about the feasibility of applications of QuAM for charged track pattern recognition to the next generation HEP experiments.",
            "paragraph_rank": 24,
            "section_rank": 8
        },
        {
            "section": "Conclusion",
            "text": "In this work, we analyzed the topological limitations of the two QuAM initialization variants and pointed out that, with limited QPU connectivity, implementation of the Trugenberger's algorithm is more feasible on the state-of-the-art IBM QPUs. We evaluated some of the pertinent properties of the generalized Grover's search, extended by Ventura and Martinez, in the context of current and future HEP data processing requirements. We have also prototyped the Trugenberger's initialization and the Grover's algorithm generalized for arbitrary (including partial) initial superpositions in the Qiskit framework, yielding recall probabilities that matched the theoretical estimates up to the machine epsilons. The prototype will allow us to run the simplest instances of QuAM on the IBM Q 20 chip, as well as to simulate the instance of 15-bit pattern QuAM on IBM Q 32 QASM Simulator.",
            "paragraph_rank": 25,
            "section_rank": 8
        },
        {
            "section": "Conclusion",
            "text": "Many important questions, that can ultimately affect the viability of QuAM, are beyond the scope of this paper and will be addressed in follow-up studies. Our next steps will be to scale-up the simulations of QuAM to higher-order patterns and to evaluate its timing and efficiency on state-of-the-art QPUs. We will try to address some QuAM limitations, including linear memory initialization, efficiency of probabilistic state cloning in the Grover-based setting, as well as implement the alternative querying mechanism based on the post-selection of the measurement result.",
            "paragraph_rank": 26,
            "section_rank": 8
        },
        {
            "text": "Figure 1 .",
            "section_rank": 9
        },
        {
            "section": "Figure 1 .",
            "text": "Figure 1. The quantum circuit implementing an iteration encoding a 2-bit pattern in the Trugenberger's approach. Qubits p are used as temporary storage register, qubits u -as control register and m -as memory register. The controlled gate, acting on the u-register and parameterized with a pattern index i \u2208 {1, . . . , N}, spawns a new term in the quantum memory superposition for the pattern being stored.",
            "paragraph_rank": 27,
            "section_rank": 9
        },
        {
            "text": "Figure 2 .",
            "section_rank": 10
        },
        {
            "section": "Figure 2 .",
            "text": "Figure 2. Capacity of quantum versus classical associative memories as a function of the number of elementary physical storage units (conventional memory cells in the classical case, and 2-level qubits in the quantum one).",
            "paragraph_rank": 28,
            "section_rank": 10
        },
        {
            "text": "Figure 3 :",
            "section_rank": 11
        },
        {
            "section": "Figure 3 :",
            "text": "Figure 3: The quantum circuit implementing a variant of the Grover's algorithm generalized for arbitrary (including partial) initial superposition. Only memory register (n qubits) is employed.\u00ce \u03c4 is the quantum oracle operator, which inverts the phase of the target state \u03c4. Likewise,\u00ce \u039e -inverts phases of all terms originally present in memory. It plays the key role in mitigation the destructive interference of the ghost states spawned by the first Grover's diffusion operator.\u011c -Grover's diffusion operator, inverting all amplitudes about their average.\u00ce \u03c4 and\u011c comprise one Grover iteration. The boxed region denotes the Grover's cycle containing T j \u2212 2 (introduced later in formula 1) Grover's iterations.",
            "paragraph_rank": 29,
            "section_rank": 11
        },
        {
            "text": "Figure 4 :",
            "section_rank": 12
        },
        {
            "section": "Figure 4 :",
            "text": "Figure 4: Theoretical estimate of (left) probability of measuring a solution as a function of the number of Grover's iterations and matching patterns (for N = 10 9 ) and (right) the peak probability for measuring a solution as a function of the number of matching and total number of patterns stored in QuAM. Both estimates assume the special case of uniform initial superposition and errorless quantum dynamics.",
            "paragraph_rank": 30,
            "section_rank": 12
        },
        {
            "text": "Figure 5 :",
            "section_rank": 13
        },
        {
            "section": "Figure 5 :",
            "text": "Figure 5: Integral (storage and recall) topological requirements for (from left to right) 2-bit, 3-bit and n-bit patterns. Thus, the connectivity of p-and m-register qubits is constant (1 and 3, correspondingly) as a function of pattern length, while is linear (n + 1) for u-register qubits.",
            "paragraph_rank": 31,
            "section_rank": 13
        },
        {
            "text": "Figure 6 :",
            "section_rank": 14
        },
        {
            "section": "Figure 6 :",
            "text": "Figure 6: The end-to-end QuAM circuits prodeced by the Qiskit-based circuit generator prototype for (top): saving three 2-bit patterns and (bottom): retrieving one 2-bit pattern.",
            "paragraph_rank": 32,
            "section_rank": 14
        },
        {
            "text": "Table 1 :",
            "section_rank": 15
        },
        {
            "section": "Table 1 :",
            "text": "QuAM requirements and capacity as a function of width of a detector hit identifier.",
            "paragraph_rank": 33,
            "section_rank": 15
        },
        {
            "section": "Table 1 :",
            "text": "EPJ Web of Conferences 214, 01012 (2019) https://doi.org/10.1051/epjconf/201921401012",
            "paragraph_rank": 34,
            "section_rank": 15
        },
        {
            "text": "Acknowledgement",
            "section_rank": 17
        },
        {
            "section": "Acknowledgement",
            "text": "This work was funded by DOE HEP Center for Computational Excellency. Our prototype was tested on the IBM Q Experience cloud service.",
            "paragraph_rank": 35,
            "section_rank": 17
        }
    ]
}
{
    "level": "paragraph",
    "abstract": [
        {
            "text": "Application of SNiPER framework to BESIII physics analysis * Xin Xia () \u22c6;1) Teng Li () \u22c6;2) Xing-Tao Huang () \u22c6;3) Xue-Yao Zhang () \u22c6",
            "paragraph_rank": 0,
            "section_rank": 1
        }
    ],
    "body_text": [
        {
            "text": "Introduction",
            "section_rank": 2
        },
        {
            "section": "Introduction",
            "text": "The Beijing Spectrometer III (BESIII) [1] is a detector at the Beijing Electron-Positron Collider II (BEPCII). The accelerator has two storage rings with a circumference of 224 m and a crossing angle of 22 mrad. Its designed peak luminosity is 1\u00d710 33 cm \u22122 s \u22121 at a beam energy of 1.89 GeV [1]. In April 2016, BEPCII successfully reached this goal. Assuming 10 7 s data taking time each year, the BESIII detector is able to collect \u223c10 billion J/\u03c8, \u223c300 million \u03c8 \u2032 , 30 million DD or 2 million D + S D \u2212 S . The huge amount of data collected makes it possible to study light hadron spectroscopy in the decay of charmonium states and charmed mesons with unprecedentedly high precision [2]. Since its first collisions in June 2008, BESIII's data volume has reached \u223c3 PB and is increasing at a speed of about 0.5 PB per year. The BESIII Offline Software System (BOSS) is the main framework that is currently used in BESIII experiment, and its role is very important in the whole offline data processing and physics analysis workflow. Based on Gaudi [3], BOSS provides standard interfaces for common software components which are necessary for data processing and analysis. However, Input/Output (I/O) in BOSS requires data format conversion and full-size data read-in, which uses extra CPU time and imposes restrictions on the processing speed [4]. Consequently, I/O is becoming a bottleneck for BOSS, especially for physics analysis.",
            "paragraph_rank": 1,
            "section_rank": 2,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b0",
                    "start": 38,
                    "text": "[1]",
                    "end": 41
                },
                {
                    "type": "bibr",
                    "ref_id": "b0",
                    "start": 292,
                    "text": "[1]",
                    "end": 295
                },
                {
                    "type": "bibr",
                    "ref_id": "b1",
                    "start": 687,
                    "text": "[2]",
                    "end": 690
                },
                {
                    "type": "bibr",
                    "ref_id": "b2",
                    "start": 1050,
                    "text": "[3]",
                    "end": 1053
                },
                {
                    "type": "bibr",
                    "ref_id": "b3",
                    "start": 1345,
                    "text": "[4]",
                    "end": 1348
                }
            ]
        },
        {
            "section": "Introduction",
            "text": "The Software for Non-collider Physics Experiments (SNiPER) [5] is a software framework for simulation, reconstruction and analysis in a variety of experiments like the Jiangmen Underground Neutrino Observatory (JUNO) [6] and the Large High Altitude Air Shower Observatory (LHAASO) [7]. SNiPER is a light-weight, flexible framework with an event data management system which is designed to manage any type of event data. Consequently, no additional data format conversion is needed. In order to improve the speed of BESIII physics analysis, SNiPER is being applied to the BESIII experiment. In this article, details are given of the redesign of the reconstructed event data model, the migration of BESIII physics analysis tools into SNiPER, and a comparison of its performance with that of BOSS.",
            "paragraph_rank": 2,
            "section_rank": 2,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b4",
                    "start": 59,
                    "text": "[5]",
                    "end": 62
                },
                {
                    "type": "bibr",
                    "ref_id": "b5",
                    "start": 217,
                    "text": "[6]",
                    "end": 220
                },
                {
                    "type": "bibr",
                    "ref_id": "b6",
                    "start": 281,
                    "text": "[7]",
                    "end": 284
                }
            ]
        },
        {
            "text": "Redesign of the Reconstructed Event Data Model",
            "section_rank": 3
        },
        {
            "section": "Redesign of the Reconstructed Event Data Model",
            "text": "For physics analysis in BOSS, the whole information of each reconstructed event is read in from the Data Summary Tape (DST) files, where data are stored as ROOT trees. The event data are then converted to Gaudi's data format to be managed by the Gaudi event data store. This conversion requires extra CPU time and memory, and thus slows down the physics analysis. In the physics analysis, the input information of each event is processed with analysis algorithms for further event selection. This kind of full-size information read-in of each event also degrades the speed of analysis.",
            "paragraph_rank": 3,
            "section_rank": 3
        },
        {
            "section": "Redesign of the Reconstructed Event Data Model",
            "text": "In SNiPER, the event data management system is designed to use the ROOT format all the way through the whole process. Event information that is read in from the DST files can be handled directly by SNiPER's event data management (EDM) system, so no conversion process is needed. The I/O system is designed to first read only part of the event information for fast event selection. Once it meets all selection requirements, the whole event information will be read. Therefore, time spent on the data I/O process is significantly reduced, which is similar to the tag-based pre-selection mechanism under the BOSS framework [8].",
            "paragraph_rank": 4,
            "section_rank": 3,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b7",
                    "start": 620,
                    "text": "[8]",
                    "end": 623
                }
            ]
        },
        {
            "section": "Redesign of the Reconstructed Event Data Model",
            "text": "To use the data management system in SNiPER, a new EDM for the BESIII physics analysis has been designed. This reconstructed event data model consists of two layers, DstEvent and EvtHeader, as shown in Fig. 1. The DstEvent contains the full information of physics events, and keeps their original structure in the old DST files. The EvtHeader is a newly added layer. With the negligible increase in size (in permillage level), the Evt-Header plays a very important role in the framework. 1) It is the entrance point for the event data service to access new ROOT files.",
            "paragraph_rank": 5,
            "section_rank": 3,
            "ref_spans": [
                {
                    "type": "figure",
                    "ref_id": "fig_0",
                    "start": 202,
                    "text": "Fig. 1",
                    "end": 208
                }
            ]
        },
        {
            "section": "Redesign of the Reconstructed Event Data Model",
            "text": "2) It stores characteristic variables of event, such as the good charged tracks, which can be customized by users to do fast selection without loading the full event information.",
            "paragraph_rank": 6,
            "section_rank": 3
        },
        {
            "section": "Redesign of the Reconstructed Event Data Model",
            "text": "3) It stores the SmartRef, which is a smart pointer providing references to events [9]. The referenced object in DstEvent will not be loaded from input files until it is actually needed. Therefore, the unnecessary performance overhead can be avoided as a result of the lazy-loading mechanism.",
            "paragraph_rank": 7,
            "section_rank": 3,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b8",
                    "start": 83,
                    "text": "[9]",
                    "end": 86
                }
            ]
        },
        {
            "section": "Redesign of the Reconstructed Event Data Model",
            "text": "In the analysis algorithm, fast selection is usually applied as soon as the EvtHeader is available. In fast selection, only the variables in EvtHeader are used without loading the full event into memory. After fast selection, the full information of survived events will be requested and loaded into memory by the SmartRef for further analysis. Using this mechanism, significantly less information needs to be read in from disk, which leads to less time consumption in I/O operations. The stricter the selection is, the faster the I/O operations will be. These are the main strategies to improve the speed of analysis in general. ",
            "paragraph_rank": 8,
            "section_rank": 3
        },
        {
            "text": "Migration of Analysis Tools",
            "section_rank": 4
        },
        {
            "section": "Migration of Analysis Tools",
            "text": "In BESIII physics analysis, several tools are indispensable, including particle identification (ParticleID), vertex fit (VertexFit) and kinematic fit (KinematicFit).",
            "paragraph_rank": 9,
            "section_rank": 4
        },
        {
            "section": "Migration of Analysis Tools",
            "text": "To organize the information left by the final state particles in detectors, a simplified version of the EvtRec-Track class was imported to integrate all the tracks in the sub-detectors into one logical track from the inside, with their corresponding track IDs stored in the TEvtRec-Track. To determine the vertex, the primary vertex information and magnetic field information are needed. So the DatabaseSvc and MagneticField were also migrated. In all these migrated packages, an interface to access the data with the new format was developed. For simplicity, TObject classes are used to substitute the EventObject classes. The final workflow model used in SNiPER can be seen in Fig. 2 ",
            "paragraph_rank": 10,
            "section_rank": 4,
            "ref_spans": [
                {
                    "type": "figure",
                    "start": 679,
                    "text": "Fig. 2",
                    "end": 685
                }
            ]
        },
        {
            "text": "Performance and Tests",
            "section_rank": 5
        },
        {
            "section": "Performance and Tests",
            "text": "In order to validate the migration, we ran the real physics analysis of the process e + e \u2212 \u2192 \u03c0 + \u03c0 \u2212 J/\u03c8 at center-of-mass (CM) energy of \u221a s = (4.260 \u00b1 0.001) GeV [10] with both BOSS and SNiPER. In the analysis, the J/\u03c8 candidate was reconstructed with lepton pairs (e + e \u2212 or \u00b5 + \u00b5 \u2212 ), which results in a final state with four charged tracks. Therefore, the number of charged tracks was required to be no less than 4, which makes the proportion of surviving events approximately 1/200. In SNiPER, the number of charged tracks is stored in EvtHeader and defined as a tag for fast selection, so only the selected events are fully loaded into memory for further study, which greatly increases the input speed. In this test, the version of BOSS was 7.0.0, and 400 DST files were randomly selected for analysis. Table 1 shows the number of surviving events after a series of selections under the two frameworks. In SNiPER, the results of event selection were exactly the same as for BOSS. After checking the step-by-step selections, the invariant mass spectrum of selected \u03c0 + \u03c0 \u2212 J/\u03c8 candidates was compared between BOSS and SNiPER using the whole dataset. Figure 3 shows the distributions of M (\u03c0 + J/\u03c8), M (\u03c0 \u2212 J/\u03c8), and M (\u03c0 + \u03c0 \u2212 ) for the signal events. The distributions in BOSS and SNiPER agree with each other very well, which means the analysis code migrated to SNiPER works properly. To quantify the improvement gained by the new physics analysis framework, we ran a series of tests with the same analysis of e + e \u2212 \u2192 \u03c0 + \u03c0 \u2212 J/\u03c8 at the CM energy of \u221a s = (4.260\u00b10.001) GeV, using the same data sample as the previous test. Under SNiPER, the total number of charged tracks, which is required to be no less than 4, is added to the EvtHeader as a pre-selection variable. 400 input data files were equally divided into 4 groups, and then submitted to the Portable Batch System in queue besq. The time consumptions were measured under the same hardware environment with a CPU, model Intel(R) Xeon(R) CPU E5-2680 v3 at frequency of 2.50 GHz. The analysis using the old EDM and BOSS consumed \u223c170.5 minutes on average, while \u223c44.5 minutes on average were spent with new EDM and SNiPER, which means analysis with the new version is \u223c3.8 times faster than BOSS.",
            "paragraph_rank": 11,
            "section_rank": 5,
            "ref_spans": [
                {
                    "type": "bibr",
                    "ref_id": "b9",
                    "start": 165,
                    "text": "[10]",
                    "end": 169
                },
                {
                    "type": "table",
                    "ref_id": "tab_1",
                    "start": 812,
                    "text": "Table 1",
                    "end": 819
                },
                {
                    "type": "figure",
                    "ref_id": "fig_1",
                    "start": 1158,
                    "text": "Figure 3",
                    "end": 1166
                }
            ]
        },
        {
            "section": "Performance and Tests",
            "text": "To investigate where the speed boost comes from, the time consumption of each section was measured and is listed in Table 2. The proportion of time consumption for each section under the two frameworks can also be seen in Fig. 4. These tests indicate that SNiPER itself is running \u223c5 times faster than BOSS, but the contribution from the new framework is very small due to its fast execution. With the new EDM with SmartRef, the I/O speed is improved by \u223c10 times, and it decreases the proportion of I/O time from \u223c80% to \u223c30%. The analysis step with SNiPER costs a similar time as BOSS, but the proportion increases significantly due to the improvement of the I/O procedure, which means computing power is concentrated on the real analysis instead of data conversion. ",
            "paragraph_rank": 12,
            "section_rank": 5,
            "ref_spans": [
                {
                    "type": "table",
                    "ref_id": "tab_2",
                    "start": 116,
                    "text": "Table 2",
                    "end": 123
                },
                {
                    "type": "figure",
                    "ref_id": "fig_2",
                    "start": 222,
                    "text": "Fig. 4",
                    "end": 228
                }
            ]
        },
        {
            "text": "Conclusion",
            "section_rank": 6
        },
        {
            "section": "Conclusion",
            "text": "In this article, a new BESIII physics analysis framework based on SNiPER has been introduced, with SmartRef implemented into the reconstructed event data model for fast event pre-selection. The new framework was tested with a real physics analysis e + e \u2212 \u2192 \u03c0 + \u03c0 \u2212 J/\u03c8 at the CM energy of \u221a s = (4.260 \u00b1 0.001) GeV, yielding exactly the same results as the original BOSS framework. In the test, SNiPER gained 3.8 times improvement in total execution speed, and saved more than 70% of the time for this specified physics channel. More tests showed that this improvement is mainly from the new event data model with SmartRef, which gains \u223c10 times improvement compared to BOSS.",
            "paragraph_rank": 13,
            "section_rank": 6
        },
        {
            "section": "Conclusion",
            "text": "We can conclude that the new physics analysis framework based on SNiPER significantly improves the I/O performance with its redesigned reconstructed event data model using SmartRef. We can gladly say that this framework is ready for physics analysis in BESIII, and the first stable version of SNiPERMT, which is suitable for the concurrent environment, will be released in 2017.",
            "paragraph_rank": 14,
            "section_rank": 6
        },
        {
            "text": "Fig. 1 :",
            "section_rank": 7
        },
        {
            "section": "Fig. 1 :",
            "text": "Fig. 1: Schema of the reconstructed event data model. The left-hand side is the EDM under BOSS, and the right-hand side is the new EDM under SNiPER.",
            "paragraph_rank": 15,
            "section_rank": 7
        },
        {
            "text": "Fig. 3 :",
            "section_rank": 8
        },
        {
            "section": "Fig. 3 :",
            "text": "Fig. 3: Comparison of the invariant mass spectra of M (\u03c0 + J/\u03c8), M (\u03c0 \u2212 J/\u03c8), and M (\u03c0 + \u03c0 \u2212 ) in BOSS and SNiPER. The black line represents the results from BOSS, and the open diamonds show the results from SNiPER.",
            "paragraph_rank": 16,
            "section_rank": 8
        },
        {
            "text": "Fig. 4 :",
            "section_rank": 9
        },
        {
            "section": "Fig. 4 :",
            "text": "Fig. 4: Time consumption proportion under BOSS (left) and SNiPER (right) framework.",
            "paragraph_rank": 17,
            "section_rank": 9
        },
        {
            "text": ".",
            "paragraph_rank": 18,
            "section_rank": 10
        },
        {
            "text": "Table 1 :",
            "section_rank": 11
        },
        {
            "section": "Table 1 :",
            "text": "Number of surviving events passing cuts in BOSS and SNiPER",
            "paragraph_rank": 19,
            "section_rank": 11
        },
        {
            "text": "Table 2 :",
            "section_rank": 12
        },
        {
            "section": "Table 2 :",
            "text": "Comparison of time consumption for BOSS and SNiPER.",
            "paragraph_rank": 20,
            "section_rank": 12
        }
    ]
}